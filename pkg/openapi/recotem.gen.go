// Package Recotem provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"gopkg.in/yaml.v2"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
	TokenAuthScopes  = "tokenAuth.Scopes"
)

// Defines values for SchemeEnum.
const (
	SchemeEnumRG SchemeEnum = "RG"

	SchemeEnumTG SchemeEnum = "TG"

	SchemeEnumTU SchemeEnum = "TU"
)

// Defines values for StatusEnum.
const (
	StatusEnumFAILURE StatusEnum = "FAILURE"

	StatusEnumPENDING StatusEnum = "PENDING"

	StatusEnumRECEIVED StatusEnum = "RECEIVED"

	StatusEnumRETRY StatusEnum = "RETRY"

	StatusEnumREVOKED StatusEnum = "REVOKED"

	StatusEnumSTARTED StatusEnum = "STARTED"

	StatusEnumSUCCESS StatusEnum = "SUCCESS"
)

// Defines values for TargetMetricEnum.
const (
	TargetMetricEnumHit TargetMetricEnum = "hit"

	TargetMetricEnumMap TargetMetricEnum = "map"

	TargetMetricEnumNdcg TargetMetricEnum = "ndcg"

	TargetMetricEnumRecall TargetMetricEnum = "recall"
)

// AuthToken defines model for AuthToken.
type AuthToken struct {
	Password string `json:"password"`
	Token    string `json:"token"`
	Username string `json:"username"`
}

// EvaluationConfig defines model for EvaluationConfig.
type EvaluationConfig struct {
	Cutoff       *int              `json:"cutoff,omitempty"`
	Id           int               `json:"id"`
	InsDatetime  time.Time         `json:"ins_datetime"`
	Name         *string           `json:"name"`
	TargetMetric *TargetMetricEnum `json:"target_metric,omitempty"`
}

// IDAndScore defines model for IDAndScore.
type IDAndScore struct {
	ItemId string  `json:"item_id"`
	Score  float32 `json:"score"`
}

// ItemMetaData defines model for ItemMetaData.
type ItemMetaData struct {
	Basename             *string   `json:"basename"`
	File                 *string   `json:"file"`
	Filesize             int       `json:"filesize"`
	Id                   int       `json:"id"`
	InsDatetime          time.Time `json:"ins_datetime"`
	Project              int       `json:"project"`
	ValidColumnsListJson string    `json:"valid_columns_list_json"`
}

// Serializer for JWT authentication.
type JWT struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`

	// User model w/o password
	User UserDetails `json:"user"`
}

// Login defines model for Login.
type Login struct {
	Email    *openapi_types.Email `json:"email,omitempty"`
	Password string               `json:"password"`
	Username *string              `json:"username,omitempty"`
}

// ModelConfiguration defines model for ModelConfiguration.
type ModelConfiguration struct {
	Id                   int       `json:"id"`
	InsDatetime          time.Time `json:"ins_datetime"`
	Name                 *string   `json:"name"`
	ParametersJson       string    `json:"parameters_json"`
	Project              int       `json:"project"`
	RecommenderClassName string    `json:"recommender_class_name"`
	TuningJob            int       `json:"tuning_job"`
}

// PaginatedItemMetaDataList defines model for PaginatedItemMetaDataList.
type PaginatedItemMetaDataList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]ItemMetaData `json:"results,omitempty"`
}

// PaginatedModelConfigurationList defines model for PaginatedModelConfigurationList.
type PaginatedModelConfigurationList struct {
	Count    *int                  `json:"count,omitempty"`
	Next     *string               `json:"next"`
	Previous *string               `json:"previous"`
	Results  *[]ModelConfiguration `json:"results,omitempty"`
}

// PaginatedParameterTuningJobList defines model for PaginatedParameterTuningJobList.
type PaginatedParameterTuningJobList struct {
	Count    *int                  `json:"count,omitempty"`
	Next     *string               `json:"next"`
	Previous *string               `json:"previous"`
	Results  *[]ParameterTuningJob `json:"results,omitempty"`
}

// PaginatedTrainedModelList defines model for PaginatedTrainedModelList.
type PaginatedTrainedModelList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]TrainedModel `json:"results,omitempty"`
}

// PaginatedTrainingDataList defines model for PaginatedTrainingDataList.
type PaginatedTrainingDataList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]TrainingData `json:"results,omitempty"`
}

// ParameterTuningJob defines model for ParameterTuningJob.
type ParameterTuningJob struct {
	BestConfig          *int                      `json:"best_config"`
	BestScore           *float32                  `json:"best_score"`
	Data                int                       `json:"data"`
	Evaluation          int                       `json:"evaluation"`
	Id                  int                       `json:"id"`
	InsDatetime         time.Time                 `json:"ins_datetime"`
	IrspackVersion      *string                   `json:"irspack_version"`
	MemoryBudget        *int                      `json:"memory_budget,omitempty"`
	NTasksParallel      *int                      `json:"n_tasks_parallel,omitempty"`
	NTrials             *int                      `json:"n_trials,omitempty"`
	RandomSeed          *int                      `json:"random_seed"`
	Split               int                       `json:"split"`
	TaskLinks           []TaskAndParameterJobLink `json:"task_links"`
	TimeoutOverall      *int                      `json:"timeout_overall"`
	TimeoutSinglestep   *int                      `json:"timeout_singlestep"`
	TrainAfterTuning    *bool                     `json:"train_after_tuning,omitempty"`
	TriedAlgorithmsJson *string                   `json:"tried_algorithms_json"`
	TunedModel          *int                      `json:"tuned_model"`
}

// PasswordChange defines model for PasswordChange.
type PasswordChange struct {
	NewPassword1 string `json:"new_password1"`
	NewPassword2 string `json:"new_password2"`
}

// Serializer for requesting a password reset e-mail.
type PasswordReset struct {
	Email openapi_types.Email `json:"email"`
}

// Serializer for confirming a password reset attempt.
type PasswordResetConfirm struct {
	NewPassword1 string `json:"new_password1"`
	NewPassword2 string `json:"new_password2"`
	Token        string `json:"token"`
	Uid          string `json:"uid"`
}

// PatchedEvaluationConfig defines model for PatchedEvaluationConfig.
type PatchedEvaluationConfig struct {
	Cutoff       *int              `json:"cutoff,omitempty"`
	Id           *int              `json:"id,omitempty"`
	InsDatetime  *time.Time        `json:"ins_datetime,omitempty"`
	Name         *string           `json:"name"`
	TargetMetric *TargetMetricEnum `json:"target_metric,omitempty"`
}

// PatchedItemMetaData defines model for PatchedItemMetaData.
type PatchedItemMetaData struct {
	Basename             *string    `json:"basename"`
	File                 *string    `json:"file"`
	Filesize             *int       `json:"filesize,omitempty"`
	Id                   *int       `json:"id,omitempty"`
	InsDatetime          *time.Time `json:"ins_datetime,omitempty"`
	Project              *int       `json:"project,omitempty"`
	ValidColumnsListJson *string    `json:"valid_columns_list_json,omitempty"`
}

// PatchedModelConfiguration defines model for PatchedModelConfiguration.
type PatchedModelConfiguration struct {
	Id                   *int       `json:"id,omitempty"`
	InsDatetime          *time.Time `json:"ins_datetime,omitempty"`
	Name                 *string    `json:"name"`
	ParametersJson       *string    `json:"parameters_json,omitempty"`
	Project              *int       `json:"project,omitempty"`
	RecommenderClassName *string    `json:"recommender_class_name,omitempty"`
	TuningJob            *int       `json:"tuning_job,omitempty"`
}

// PatchedParameterTuningJob defines model for PatchedParameterTuningJob.
type PatchedParameterTuningJob struct {
	BestConfig          *int                       `json:"best_config"`
	BestScore           *float32                   `json:"best_score"`
	Data                *int                       `json:"data,omitempty"`
	Evaluation          *int                       `json:"evaluation,omitempty"`
	Id                  *int                       `json:"id,omitempty"`
	InsDatetime         *time.Time                 `json:"ins_datetime,omitempty"`
	IrspackVersion      *string                    `json:"irspack_version"`
	MemoryBudget        *int                       `json:"memory_budget,omitempty"`
	NTasksParallel      *int                       `json:"n_tasks_parallel,omitempty"`
	NTrials             *int                       `json:"n_trials,omitempty"`
	RandomSeed          *int                       `json:"random_seed"`
	Split               *int                       `json:"split,omitempty"`
	TaskLinks           *[]TaskAndParameterJobLink `json:"task_links,omitempty"`
	TimeoutOverall      *int                       `json:"timeout_overall"`
	TimeoutSinglestep   *int                       `json:"timeout_singlestep"`
	TrainAfterTuning    *bool                      `json:"train_after_tuning,omitempty"`
	TriedAlgorithmsJson *string                    `json:"tried_algorithms_json"`
	TunedModel          *int                       `json:"tuned_model"`
}

// PatchedProject defines model for PatchedProject.
type PatchedProject struct {
	Id          *int       `json:"id,omitempty"`
	InsDatetime *time.Time `json:"ins_datetime,omitempty"`
	ItemColumn  *string    `json:"item_column,omitempty"`
	Name        *string    `json:"name,omitempty"`
	TimeColumn  *string    `json:"time_column"`
	UserColumn  *string    `json:"user_column,omitempty"`
}

// PatchedSplitConfig defines model for PatchedSplitConfig.
type PatchedSplitConfig struct {
	HeldoutRatio  *float32    `json:"heldout_ratio,omitempty"`
	Id            *int        `json:"id,omitempty"`
	InsDatetime   *time.Time  `json:"ins_datetime,omitempty"`
	NHeldout      *int        `json:"n_heldout"`
	NTestUsers    *int        `json:"n_test_users"`
	Name          *string     `json:"name"`
	RandomSeed    *int        `json:"random_seed,omitempty"`
	Scheme        *SchemeEnum `json:"scheme,omitempty"`
	TestUserRatio *float32    `json:"test_user_ratio,omitempty"`
}

// PatchedTrainedModel defines model for PatchedTrainedModel.
type PatchedTrainedModel struct {
	Basename       *string                    `json:"basename"`
	Configuration  *int                       `json:"configuration,omitempty"`
	DataLoc        *int                       `json:"data_loc,omitempty"`
	File           *string                    `json:"file"`
	Filesize       *int                       `json:"filesize,omitempty"`
	Id             *int                       `json:"id,omitempty"`
	InsDatetime    *time.Time                 `json:"ins_datetime,omitempty"`
	IrspackVersion *string                    `json:"irspack_version"`
	TaskLinks      *[]TaskAndTrainedModelLink `json:"task_links,omitempty"`
}

// PatchedTrainingData defines model for PatchedTrainingData.
type PatchedTrainingData struct {
	Basename    *string    `json:"basename"`
	File        *string    `json:"file"`
	Filesize    *int       `json:"filesize,omitempty"`
	Id          *int       `json:"id,omitempty"`
	InsDatetime *time.Time `json:"ins_datetime,omitempty"`
	Project     *int       `json:"project,omitempty"`
}

// User model w/o password
type PatchedUserDetails struct {
	Email     *openapi_types.Email `json:"email,omitempty"`
	FirstName *string              `json:"first_name,omitempty"`
	LastName  *string              `json:"last_name,omitempty"`
	Pk        *int                 `json:"pk,omitempty"`

	// Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username *string `json:"username,omitempty"`
}

// Project defines model for Project.
type Project struct {
	Id          int       `json:"id"`
	InsDatetime time.Time `json:"ins_datetime"`
	ItemColumn  string    `json:"item_column"`
	Name        string    `json:"name"`
	TimeColumn  *string   `json:"time_column"`
	UserColumn  string    `json:"user_column"`
}

// RawRecommendation defines model for RawRecommendation.
type RawRecommendation struct {
	Recommendations []IDAndScore `json:"recommendations"`
	UserId          string       `json:"user_id"`
	UserProfile     []string     `json:"user_profile"`
}

// RecommendationWithMetaData defines model for RecommendationWithMetaData.
type RecommendationWithMetaData struct {
	Recommendations string `json:"recommendations"`
	UserId          string `json:"user_id"`
	UserProfile     string `json:"user_profile"`
}

// RestAuthDetail defines model for RestAuthDetail.
type RestAuthDetail struct {
	Detail string `json:"detail"`
}

// SchemeEnum defines model for SchemeEnum.
type SchemeEnum string

// SplitConfig defines model for SplitConfig.
type SplitConfig struct {
	HeldoutRatio  *float32    `json:"heldout_ratio,omitempty"`
	Id            int         `json:"id"`
	InsDatetime   time.Time   `json:"ins_datetime"`
	NHeldout      *int        `json:"n_heldout"`
	NTestUsers    *int        `json:"n_test_users"`
	Name          *string     `json:"name"`
	RandomSeed    *int        `json:"random_seed,omitempty"`
	Scheme        *SchemeEnum `json:"scheme,omitempty"`
	TestUserRatio *float32    `json:"test_user_ratio,omitempty"`
}

// StatusEnum defines model for StatusEnum.
type StatusEnum string

// TargetMetricEnum defines model for TargetMetricEnum.
type TargetMetricEnum string

// TaskAndParameterJobLink defines model for TaskAndParameterJobLink.
type TaskAndParameterJobLink struct {
	Task TaskResult `json:"task"`
}

// TaskAndTrainedModelLink defines model for TaskAndTrainedModelLink.
type TaskAndTrainedModelLink struct {
	Task TaskResult `json:"task"`
}

// TaskLog defines model for TaskLog.
type TaskLog struct {
	Contents    *string   `json:"contents,omitempty"`
	Id          int       `json:"id"`
	InsDatetime time.Time `json:"ins_datetime"`
	Task        int       `json:"task"`
}

// TaskResult defines model for TaskResult.
type TaskResult struct {

	// Datetime field when the task result was created in UTC
	DateCreated time.Time `json:"date_created"`

	// Datetime field when the task was completed in UTC
	DateDone time.Time `json:"date_done"`

	// Current state of the task being run
	Status *struct {
		// Embedded struct due to allOf(#/components/schemas/StatusEnum)
		StatusEnum `yaml:",inline"`
	} `json:"status,omitempty"`

	// Celery ID for the Task that was run
	TaskId string `json:"task_id"`

	// Text of the traceback if the task generated one
	Traceback *string `json:"traceback"`
}

// TokenRefresh defines model for TokenRefresh.
type TokenRefresh struct {
	Access  string `json:"access"`
	Refresh string `json:"refresh"`
}

// TokenVerify defines model for TokenVerify.
type TokenVerify struct {
	Token string `json:"token"`
}

// TrainedModel defines model for TrainedModel.
type TrainedModel struct {
	Basename       *string                   `json:"basename"`
	Configuration  int                       `json:"configuration"`
	DataLoc        int                       `json:"data_loc"`
	File           *string                   `json:"file"`
	Filesize       int                       `json:"filesize"`
	Id             int                       `json:"id"`
	InsDatetime    time.Time                 `json:"ins_datetime"`
	IrspackVersion *string                   `json:"irspack_version"`
	TaskLinks      []TaskAndTrainedModelLink `json:"task_links"`
}

// TrainingData defines model for TrainingData.
type TrainingData struct {
	Basename    *string   `json:"basename"`
	File        *string   `json:"file"`
	Filesize    int       `json:"filesize"`
	Id          int       `json:"id"`
	InsDatetime time.Time `json:"ins_datetime"`
	Project     int       `json:"project"`
}

// User model w/o password
type UserDetails struct {
	Email     openapi_types.Email `json:"email"`
	FirstName *string             `json:"first_name,omitempty"`
	LastName  *string             `json:"last_name,omitempty"`
	Pk        int                 `json:"pk"`

	// Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// AuthLoginCreateJSONBody defines parameters for AuthLoginCreate.
type AuthLoginCreateJSONBody Login

// AuthPasswordChangeCreateJSONBody defines parameters for AuthPasswordChangeCreate.
type AuthPasswordChangeCreateJSONBody PasswordChange

// AuthPasswordResetCreateJSONBody defines parameters for AuthPasswordResetCreate.
type AuthPasswordResetCreateJSONBody PasswordReset

// AuthPasswordResetConfirmCreateJSONBody defines parameters for AuthPasswordResetConfirmCreate.
type AuthPasswordResetConfirmCreateJSONBody PasswordResetConfirm

// AuthTokenRefreshCreateJSONBody defines parameters for AuthTokenRefreshCreate.
type AuthTokenRefreshCreateJSONBody TokenRefresh

// AuthTokenVerifyCreateJSONBody defines parameters for AuthTokenVerifyCreate.
type AuthTokenVerifyCreateJSONBody TokenVerify

// AuthUserPartialUpdateJSONBody defines parameters for AuthUserPartialUpdate.
type AuthUserPartialUpdateJSONBody PatchedUserDetails

// AuthUserUpdateJSONBody defines parameters for AuthUserUpdate.
type AuthUserUpdateJSONBody UserDetails

// EvaluationConfigListParams defines parameters for EvaluationConfigList.
type EvaluationConfigListParams struct {
	Id      *int    `json:"id,omitempty"`
	Name    *string `json:"name,omitempty"`
	Unnamed *bool   `json:"unnamed,omitempty"`
}

// EvaluationConfigCreateJSONBody defines parameters for EvaluationConfigCreate.
type EvaluationConfigCreateJSONBody EvaluationConfig

// EvaluationConfigPartialUpdateJSONBody defines parameters for EvaluationConfigPartialUpdate.
type EvaluationConfigPartialUpdateJSONBody PatchedEvaluationConfig

// EvaluationConfigUpdateJSONBody defines parameters for EvaluationConfigUpdate.
type EvaluationConfigUpdateJSONBody EvaluationConfig

// ItemMetaDataListParams defines parameters for ItemMetaDataList.
type ItemMetaDataListParams struct {
	Id *int `json:"id,omitempty"`

	// A page number within the paginated result set.
	Page *int `json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `json:"page_size,omitempty"`
	Project  *int `json:"project,omitempty"`
}

// ModelConfigurationListParams defines parameters for ModelConfigurationList.
type ModelConfigurationListParams struct {
	Id *int `json:"id,omitempty"`

	// A page number within the paginated result set.
	Page *int `json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `json:"page_size,omitempty"`
	Project  *int `json:"project,omitempty"`
}

// ModelConfigurationCreateJSONBody defines parameters for ModelConfigurationCreate.
type ModelConfigurationCreateJSONBody ModelConfiguration

// ModelConfigurationPartialUpdateJSONBody defines parameters for ModelConfigurationPartialUpdate.
type ModelConfigurationPartialUpdateJSONBody PatchedModelConfiguration

// ModelConfigurationUpdateJSONBody defines parameters for ModelConfigurationUpdate.
type ModelConfigurationUpdateJSONBody ModelConfiguration

// ParameterTuningJobListParams defines parameters for ParameterTuningJobList.
type ParameterTuningJobListParams struct {
	Data        *int `json:"data,omitempty"`
	DataProject *int `json:"data__project,omitempty"`
	Id          *int `json:"id,omitempty"`

	// A page number within the paginated result set.
	Page *int `json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `json:"page_size,omitempty"`
}

// ParameterTuningJobCreateJSONBody defines parameters for ParameterTuningJobCreate.
type ParameterTuningJobCreateJSONBody ParameterTuningJob

// ParameterTuningJobPartialUpdateJSONBody defines parameters for ParameterTuningJobPartialUpdate.
type ParameterTuningJobPartialUpdateJSONBody PatchedParameterTuningJob

// ParameterTuningJobUpdateJSONBody defines parameters for ParameterTuningJobUpdate.
type ParameterTuningJobUpdateJSONBody ParameterTuningJob

// ProjectListParams defines parameters for ProjectList.
type ProjectListParams struct {
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// ProjectCreateJSONBody defines parameters for ProjectCreate.
type ProjectCreateJSONBody Project

// ProjectPartialUpdateJSONBody defines parameters for ProjectPartialUpdate.
type ProjectPartialUpdateJSONBody PatchedProject

// ProjectUpdateJSONBody defines parameters for ProjectUpdate.
type ProjectUpdateJSONBody Project

// SchemaRetrieveParams defines parameters for SchemaRetrieve.
type SchemaRetrieveParams struct {
	Format *SchemaRetrieveParamsFormat `json:"format,omitempty"`
	Lang   *SchemaRetrieveParamsLang   `json:"lang,omitempty"`
}

// SchemaRetrieveParamsFormat defines parameters for SchemaRetrieve.
type SchemaRetrieveParamsFormat string

// SchemaRetrieveParamsLang defines parameters for SchemaRetrieve.
type SchemaRetrieveParamsLang string

// SplitConfigListParams defines parameters for SplitConfigList.
type SplitConfigListParams struct {
	Id      *int    `json:"id,omitempty"`
	Name    *string `json:"name,omitempty"`
	Unnamed *bool   `json:"unnamed,omitempty"`
}

// SplitConfigCreateJSONBody defines parameters for SplitConfigCreate.
type SplitConfigCreateJSONBody SplitConfig

// SplitConfigPartialUpdateJSONBody defines parameters for SplitConfigPartialUpdate.
type SplitConfigPartialUpdateJSONBody PatchedSplitConfig

// SplitConfigUpdateJSONBody defines parameters for SplitConfigUpdate.
type SplitConfigUpdateJSONBody SplitConfig

// TaskLogListParams defines parameters for TaskLogList.
type TaskLogListParams struct {
	Id          *int `json:"id,omitempty"`
	IdGt        *int `json:"id_gt,omitempty"`
	ModelId     *int `json:"model_id,omitempty"`
	TuningJobId *int `json:"tuning_job_id,omitempty"`
}

// TokenCreateJSONBody defines parameters for TokenCreate.
type TokenCreateJSONBody AuthToken

// TrainedModelListParams defines parameters for TrainedModelList.
type TrainedModelListParams struct {
	DataLoc        *int `json:"data_loc,omitempty"`
	DataLocProject *int `json:"data_loc__project,omitempty"`
	Id             *int `json:"id,omitempty"`

	// A page number within the paginated result set.
	Page *int `json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `json:"page_size,omitempty"`
}

// TrainedModelCreateJSONBody defines parameters for TrainedModelCreate.
type TrainedModelCreateJSONBody TrainedModel

// TrainedModelPartialUpdateJSONBody defines parameters for TrainedModelPartialUpdate.
type TrainedModelPartialUpdateJSONBody PatchedTrainedModel

// TrainedModelUpdateJSONBody defines parameters for TrainedModelUpdate.
type TrainedModelUpdateJSONBody TrainedModel

// TrainingDataListParams defines parameters for TrainingDataList.
type TrainingDataListParams struct {
	Id *int `json:"id,omitempty"`

	// A page number within the paginated result set.
	Page *int `json:"page,omitempty"`

	// Number of results to return per page.
	PageSize *int `json:"page_size,omitempty"`
	Project  *int `json:"project,omitempty"`
}

// AuthLoginCreateJSONRequestBody defines body for AuthLoginCreate for application/json ContentType.
type AuthLoginCreateJSONRequestBody AuthLoginCreateJSONBody

// AuthPasswordChangeCreateJSONRequestBody defines body for AuthPasswordChangeCreate for application/json ContentType.
type AuthPasswordChangeCreateJSONRequestBody AuthPasswordChangeCreateJSONBody

// AuthPasswordResetCreateJSONRequestBody defines body for AuthPasswordResetCreate for application/json ContentType.
type AuthPasswordResetCreateJSONRequestBody AuthPasswordResetCreateJSONBody

// AuthPasswordResetConfirmCreateJSONRequestBody defines body for AuthPasswordResetConfirmCreate for application/json ContentType.
type AuthPasswordResetConfirmCreateJSONRequestBody AuthPasswordResetConfirmCreateJSONBody

// AuthTokenRefreshCreateJSONRequestBody defines body for AuthTokenRefreshCreate for application/json ContentType.
type AuthTokenRefreshCreateJSONRequestBody AuthTokenRefreshCreateJSONBody

// AuthTokenVerifyCreateJSONRequestBody defines body for AuthTokenVerifyCreate for application/json ContentType.
type AuthTokenVerifyCreateJSONRequestBody AuthTokenVerifyCreateJSONBody

// AuthUserPartialUpdateJSONRequestBody defines body for AuthUserPartialUpdate for application/json ContentType.
type AuthUserPartialUpdateJSONRequestBody AuthUserPartialUpdateJSONBody

// AuthUserUpdateJSONRequestBody defines body for AuthUserUpdate for application/json ContentType.
type AuthUserUpdateJSONRequestBody AuthUserUpdateJSONBody

// EvaluationConfigCreateJSONRequestBody defines body for EvaluationConfigCreate for application/json ContentType.
type EvaluationConfigCreateJSONRequestBody EvaluationConfigCreateJSONBody

// EvaluationConfigPartialUpdateJSONRequestBody defines body for EvaluationConfigPartialUpdate for application/json ContentType.
type EvaluationConfigPartialUpdateJSONRequestBody EvaluationConfigPartialUpdateJSONBody

// EvaluationConfigUpdateJSONRequestBody defines body for EvaluationConfigUpdate for application/json ContentType.
type EvaluationConfigUpdateJSONRequestBody EvaluationConfigUpdateJSONBody

// ModelConfigurationCreateJSONRequestBody defines body for ModelConfigurationCreate for application/json ContentType.
type ModelConfigurationCreateJSONRequestBody ModelConfigurationCreateJSONBody

// ModelConfigurationPartialUpdateJSONRequestBody defines body for ModelConfigurationPartialUpdate for application/json ContentType.
type ModelConfigurationPartialUpdateJSONRequestBody ModelConfigurationPartialUpdateJSONBody

// ModelConfigurationUpdateJSONRequestBody defines body for ModelConfigurationUpdate for application/json ContentType.
type ModelConfigurationUpdateJSONRequestBody ModelConfigurationUpdateJSONBody

// ParameterTuningJobCreateJSONRequestBody defines body for ParameterTuningJobCreate for application/json ContentType.
type ParameterTuningJobCreateJSONRequestBody ParameterTuningJobCreateJSONBody

// ParameterTuningJobPartialUpdateJSONRequestBody defines body for ParameterTuningJobPartialUpdate for application/json ContentType.
type ParameterTuningJobPartialUpdateJSONRequestBody ParameterTuningJobPartialUpdateJSONBody

// ParameterTuningJobUpdateJSONRequestBody defines body for ParameterTuningJobUpdate for application/json ContentType.
type ParameterTuningJobUpdateJSONRequestBody ParameterTuningJobUpdateJSONBody

// ProjectCreateJSONRequestBody defines body for ProjectCreate for application/json ContentType.
type ProjectCreateJSONRequestBody ProjectCreateJSONBody

// ProjectPartialUpdateJSONRequestBody defines body for ProjectPartialUpdate for application/json ContentType.
type ProjectPartialUpdateJSONRequestBody ProjectPartialUpdateJSONBody

// ProjectUpdateJSONRequestBody defines body for ProjectUpdate for application/json ContentType.
type ProjectUpdateJSONRequestBody ProjectUpdateJSONBody

// SplitConfigCreateJSONRequestBody defines body for SplitConfigCreate for application/json ContentType.
type SplitConfigCreateJSONRequestBody SplitConfigCreateJSONBody

// SplitConfigPartialUpdateJSONRequestBody defines body for SplitConfigPartialUpdate for application/json ContentType.
type SplitConfigPartialUpdateJSONRequestBody SplitConfigPartialUpdateJSONBody

// SplitConfigUpdateJSONRequestBody defines body for SplitConfigUpdate for application/json ContentType.
type SplitConfigUpdateJSONRequestBody SplitConfigUpdateJSONBody

// TokenCreateJSONRequestBody defines body for TokenCreate for application/json ContentType.
type TokenCreateJSONRequestBody TokenCreateJSONBody

// TrainedModelCreateJSONRequestBody defines body for TrainedModelCreate for application/json ContentType.
type TrainedModelCreateJSONRequestBody TrainedModelCreateJSONBody

// TrainedModelPartialUpdateJSONRequestBody defines body for TrainedModelPartialUpdate for application/json ContentType.
type TrainedModelPartialUpdateJSONRequestBody TrainedModelPartialUpdateJSONBody

// TrainedModelUpdateJSONRequestBody defines body for TrainedModelUpdate for application/json ContentType.
type TrainedModelUpdateJSONRequestBody TrainedModelUpdateJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AuthLoginCreate request  with any body
	AuthLoginCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthLoginCreate(ctx context.Context, body AuthLoginCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthLogoutCreate request
	AuthLogoutCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordChangeCreate request  with any body
	AuthPasswordChangeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordChangeCreate(ctx context.Context, body AuthPasswordChangeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordResetCreate request  with any body
	AuthPasswordResetCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordResetCreate(ctx context.Context, body AuthPasswordResetCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthPasswordResetConfirmCreate request  with any body
	AuthPasswordResetConfirmCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthPasswordResetConfirmCreate(ctx context.Context, body AuthPasswordResetConfirmCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenRefreshCreate request  with any body
	AuthTokenRefreshCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthTokenRefreshCreate(ctx context.Context, body AuthTokenRefreshCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenVerifyCreate request  with any body
	AuthTokenVerifyCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthTokenVerifyCreate(ctx context.Context, body AuthTokenVerifyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthUserRetrieve request
	AuthUserRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthUserPartialUpdate request  with any body
	AuthUserPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthUserPartialUpdate(ctx context.Context, body AuthUserPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthUserUpdate request  with any body
	AuthUserUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthUserUpdate(ctx context.Context, body AuthUserUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluationConfigList request
	EvaluationConfigList(ctx context.Context, params *EvaluationConfigListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluationConfigCreate request  with any body
	EvaluationConfigCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EvaluationConfigCreate(ctx context.Context, body EvaluationConfigCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluationConfigDestroy request
	EvaluationConfigDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluationConfigRetrieve request
	EvaluationConfigRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluationConfigPartialUpdate request  with any body
	EvaluationConfigPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EvaluationConfigPartialUpdate(ctx context.Context, id int, body EvaluationConfigPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluationConfigUpdate request  with any body
	EvaluationConfigUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EvaluationConfigUpdate(ctx context.Context, id int, body EvaluationConfigUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ItemMetaDataList request
	ItemMetaDataList(ctx context.Context, params *ItemMetaDataListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ItemMetaDataCreate request  with any body
	ItemMetaDataCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ItemMetaDataDestroy request
	ItemMetaDataDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ItemMetaDataRetrieve request
	ItemMetaDataRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ItemMetaDataPartialUpdate request  with any body
	ItemMetaDataPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ItemMetaDataUpdate request  with any body
	ItemMetaDataUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ItemMetaDataDownloadFileRetrieve request
	ItemMetaDataDownloadFileRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ItemMetaDataUnlinkFileDestroy request
	ItemMetaDataUnlinkFileDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModelConfigurationList request
	ModelConfigurationList(ctx context.Context, params *ModelConfigurationListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModelConfigurationCreate request  with any body
	ModelConfigurationCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModelConfigurationCreate(ctx context.Context, body ModelConfigurationCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModelConfigurationDestroy request
	ModelConfigurationDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModelConfigurationRetrieve request
	ModelConfigurationRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModelConfigurationPartialUpdate request  with any body
	ModelConfigurationPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModelConfigurationPartialUpdate(ctx context.Context, id int, body ModelConfigurationPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModelConfigurationUpdate request  with any body
	ModelConfigurationUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModelConfigurationUpdate(ctx context.Context, id int, body ModelConfigurationUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ParameterTuningJobList request
	ParameterTuningJobList(ctx context.Context, params *ParameterTuningJobListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ParameterTuningJobCreate request  with any body
	ParameterTuningJobCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ParameterTuningJobCreate(ctx context.Context, body ParameterTuningJobCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ParameterTuningJobDestroy request
	ParameterTuningJobDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ParameterTuningJobRetrieve request
	ParameterTuningJobRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ParameterTuningJobPartialUpdate request  with any body
	ParameterTuningJobPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ParameterTuningJobPartialUpdate(ctx context.Context, id int, body ParameterTuningJobPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ParameterTuningJobUpdate request  with any body
	ParameterTuningJobUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ParameterTuningJobUpdate(ctx context.Context, id int, body ParameterTuningJobUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectList request
	ProjectList(ctx context.Context, params *ProjectListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectCreate request  with any body
	ProjectCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProjectCreate(ctx context.Context, body ProjectCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectDestroy request
	ProjectDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectRetrieve request
	ProjectRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectPartialUpdate request  with any body
	ProjectPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProjectPartialUpdate(ctx context.Context, id int, body ProjectPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectUpdate request  with any body
	ProjectUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProjectUpdate(ctx context.Context, id int, body ProjectUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProjectSummaryRetrieve request
	ProjectSummaryRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SchemaRetrieve request
	SchemaRetrieve(ctx context.Context, params *SchemaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SplitConfigList request
	SplitConfigList(ctx context.Context, params *SplitConfigListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SplitConfigCreate request  with any body
	SplitConfigCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SplitConfigCreate(ctx context.Context, body SplitConfigCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SplitConfigDestroy request
	SplitConfigDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SplitConfigRetrieve request
	SplitConfigRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SplitConfigPartialUpdate request  with any body
	SplitConfigPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SplitConfigPartialUpdate(ctx context.Context, id int, body SplitConfigPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SplitConfigUpdate request  with any body
	SplitConfigUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SplitConfigUpdate(ctx context.Context, id int, body SplitConfigUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TaskLogList request
	TaskLogList(ctx context.Context, params *TaskLogListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TaskLogRetrieve request
	TaskLogRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TokenCreate request  with any body
	TokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TokenCreate(ctx context.Context, body TokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainedModelList request
	TrainedModelList(ctx context.Context, params *TrainedModelListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainedModelCreate request  with any body
	TrainedModelCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TrainedModelCreate(ctx context.Context, body TrainedModelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainedModelDestroy request
	TrainedModelDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainedModelRetrieve request
	TrainedModelRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainedModelPartialUpdate request  with any body
	TrainedModelPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TrainedModelPartialUpdate(ctx context.Context, id int, body TrainedModelPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainedModelUpdate request  with any body
	TrainedModelUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TrainedModelUpdate(ctx context.Context, id int, body TrainedModelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainedModelDownloadFileRetrieve request
	TrainedModelDownloadFileRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainedModelSampleRecommendationMetadataRetrieve request
	TrainedModelSampleRecommendationMetadataRetrieve(ctx context.Context, id int, metadataId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainedModelSampleRecommendationRawRetrieve request
	TrainedModelSampleRecommendationRawRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainedModelUnlinkFileDestroy request
	TrainedModelUnlinkFileDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainingDataList request
	TrainingDataList(ctx context.Context, params *TrainingDataListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainingDataCreate request  with any body
	TrainingDataCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainingDataDestroy request
	TrainingDataDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainingDataRetrieve request
	TrainingDataRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainingDataPartialUpdate request  with any body
	TrainingDataPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainingDataUpdate request  with any body
	TrainingDataUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainingDataDownloadFileRetrieve request
	TrainingDataDownloadFileRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TrainingDataUnlinkFileDestroy request
	TrainingDataUnlinkFileDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AuthLoginCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthLoginCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthLoginCreate(ctx context.Context, body AuthLoginCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthLoginCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthLogoutCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthLogoutCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordChangeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordChangeCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordChangeCreate(ctx context.Context, body AuthPasswordChangeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordChangeCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordResetCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordResetCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordResetCreate(ctx context.Context, body AuthPasswordResetCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordResetCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordResetConfirmCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordResetConfirmCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthPasswordResetConfirmCreate(ctx context.Context, body AuthPasswordResetConfirmCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthPasswordResetConfirmCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenRefreshCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenRefreshCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenRefreshCreate(ctx context.Context, body AuthTokenRefreshCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenRefreshCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenVerifyCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenVerifyCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenVerifyCreate(ctx context.Context, body AuthTokenVerifyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenVerifyCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthUserRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthUserRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthUserPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthUserPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthUserPartialUpdate(ctx context.Context, body AuthUserPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthUserPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthUserUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthUserUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthUserUpdate(ctx context.Context, body AuthUserUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthUserUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluationConfigList(ctx context.Context, params *EvaluationConfigListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluationConfigListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluationConfigCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluationConfigCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluationConfigCreate(ctx context.Context, body EvaluationConfigCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluationConfigCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluationConfigDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluationConfigDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluationConfigRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluationConfigRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluationConfigPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluationConfigPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluationConfigPartialUpdate(ctx context.Context, id int, body EvaluationConfigPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluationConfigPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluationConfigUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluationConfigUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluationConfigUpdate(ctx context.Context, id int, body EvaluationConfigUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluationConfigUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ItemMetaDataList(ctx context.Context, params *ItemMetaDataListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewItemMetaDataListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ItemMetaDataCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewItemMetaDataCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ItemMetaDataDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewItemMetaDataDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ItemMetaDataRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewItemMetaDataRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ItemMetaDataPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewItemMetaDataPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ItemMetaDataUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewItemMetaDataUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ItemMetaDataDownloadFileRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewItemMetaDataDownloadFileRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ItemMetaDataUnlinkFileDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewItemMetaDataUnlinkFileDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModelConfigurationList(ctx context.Context, params *ModelConfigurationListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelConfigurationListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModelConfigurationCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelConfigurationCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModelConfigurationCreate(ctx context.Context, body ModelConfigurationCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelConfigurationCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModelConfigurationDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelConfigurationDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModelConfigurationRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelConfigurationRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModelConfigurationPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelConfigurationPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModelConfigurationPartialUpdate(ctx context.Context, id int, body ModelConfigurationPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelConfigurationPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModelConfigurationUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelConfigurationUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModelConfigurationUpdate(ctx context.Context, id int, body ModelConfigurationUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelConfigurationUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParameterTuningJobList(ctx context.Context, params *ParameterTuningJobListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParameterTuningJobListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParameterTuningJobCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParameterTuningJobCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParameterTuningJobCreate(ctx context.Context, body ParameterTuningJobCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParameterTuningJobCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParameterTuningJobDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParameterTuningJobDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParameterTuningJobRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParameterTuningJobRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParameterTuningJobPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParameterTuningJobPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParameterTuningJobPartialUpdate(ctx context.Context, id int, body ParameterTuningJobPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParameterTuningJobPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParameterTuningJobUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParameterTuningJobUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParameterTuningJobUpdate(ctx context.Context, id int, body ParameterTuningJobUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParameterTuningJobUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectList(ctx context.Context, params *ProjectListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectCreate(ctx context.Context, body ProjectCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectPartialUpdate(ctx context.Context, id int, body ProjectPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectUpdate(ctx context.Context, id int, body ProjectUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProjectSummaryRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectSummaryRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchemaRetrieve(ctx context.Context, params *SchemaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchemaRetrieveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SplitConfigList(ctx context.Context, params *SplitConfigListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSplitConfigListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SplitConfigCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSplitConfigCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SplitConfigCreate(ctx context.Context, body SplitConfigCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSplitConfigCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SplitConfigDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSplitConfigDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SplitConfigRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSplitConfigRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SplitConfigPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSplitConfigPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SplitConfigPartialUpdate(ctx context.Context, id int, body SplitConfigPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSplitConfigPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SplitConfigUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSplitConfigUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SplitConfigUpdate(ctx context.Context, id int, body SplitConfigUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSplitConfigUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TaskLogList(ctx context.Context, params *TaskLogListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTaskLogListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TaskLogRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTaskLogRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenCreate(ctx context.Context, body TokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainedModelList(ctx context.Context, params *TrainedModelListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainedModelListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainedModelCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainedModelCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainedModelCreate(ctx context.Context, body TrainedModelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainedModelCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainedModelDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainedModelDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainedModelRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainedModelRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainedModelPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainedModelPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainedModelPartialUpdate(ctx context.Context, id int, body TrainedModelPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainedModelPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainedModelUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainedModelUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainedModelUpdate(ctx context.Context, id int, body TrainedModelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainedModelUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainedModelDownloadFileRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainedModelDownloadFileRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainedModelSampleRecommendationMetadataRetrieve(ctx context.Context, id int, metadataId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainedModelSampleRecommendationMetadataRetrieveRequest(c.Server, id, metadataId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainedModelSampleRecommendationRawRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainedModelSampleRecommendationRawRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainedModelUnlinkFileDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainedModelUnlinkFileDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainingDataList(ctx context.Context, params *TrainingDataListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainingDataListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainingDataCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainingDataCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainingDataDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainingDataDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainingDataRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainingDataRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainingDataPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainingDataPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainingDataUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainingDataUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainingDataDownloadFileRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainingDataDownloadFileRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TrainingDataUnlinkFileDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTrainingDataUnlinkFileDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAuthLoginCreateRequest calls the generic AuthLoginCreate builder with application/json body
func NewAuthLoginCreateRequest(server string, body AuthLoginCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthLoginCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthLoginCreateRequestWithBody generates requests for AuthLoginCreate with any type of body
func NewAuthLoginCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/login/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthLogoutCreateRequest generates requests for AuthLogoutCreate
func NewAuthLogoutCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/logout/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthPasswordChangeCreateRequest calls the generic AuthPasswordChangeCreate builder with application/json body
func NewAuthPasswordChangeCreateRequest(server string, body AuthPasswordChangeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordChangeCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthPasswordChangeCreateRequestWithBody generates requests for AuthPasswordChangeCreate with any type of body
func NewAuthPasswordChangeCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/password/change/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthPasswordResetCreateRequest calls the generic AuthPasswordResetCreate builder with application/json body
func NewAuthPasswordResetCreateRequest(server string, body AuthPasswordResetCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordResetCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthPasswordResetCreateRequestWithBody generates requests for AuthPasswordResetCreate with any type of body
func NewAuthPasswordResetCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/password/reset/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthPasswordResetConfirmCreateRequest calls the generic AuthPasswordResetConfirmCreate builder with application/json body
func NewAuthPasswordResetConfirmCreateRequest(server string, body AuthPasswordResetConfirmCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthPasswordResetConfirmCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthPasswordResetConfirmCreateRequestWithBody generates requests for AuthPasswordResetConfirmCreate with any type of body
func NewAuthPasswordResetConfirmCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/password/reset/confirm/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthTokenRefreshCreateRequest calls the generic AuthTokenRefreshCreate builder with application/json body
func NewAuthTokenRefreshCreateRequest(server string, body AuthTokenRefreshCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthTokenRefreshCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthTokenRefreshCreateRequestWithBody generates requests for AuthTokenRefreshCreate with any type of body
func NewAuthTokenRefreshCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/token/refresh/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthTokenVerifyCreateRequest calls the generic AuthTokenVerifyCreate builder with application/json body
func NewAuthTokenVerifyCreateRequest(server string, body AuthTokenVerifyCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthTokenVerifyCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthTokenVerifyCreateRequestWithBody generates requests for AuthTokenVerifyCreate with any type of body
func NewAuthTokenVerifyCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/token/verify/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthUserRetrieveRequest generates requests for AuthUserRetrieve
func NewAuthUserRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/user/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthUserPartialUpdateRequest calls the generic AuthUserPartialUpdate builder with application/json body
func NewAuthUserPartialUpdateRequest(server string, body AuthUserPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthUserPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthUserPartialUpdateRequestWithBody generates requests for AuthUserPartialUpdate with any type of body
func NewAuthUserPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/user/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthUserUpdateRequest calls the generic AuthUserUpdate builder with application/json body
func NewAuthUserUpdateRequest(server string, body AuthUserUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthUserUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthUserUpdateRequestWithBody generates requests for AuthUserUpdate with any type of body
func NewAuthUserUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/user/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEvaluationConfigListRequest generates requests for EvaluationConfigList
func NewEvaluationConfigListRequest(server string, params *EvaluationConfigListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/evaluation_config/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Unnamed != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unnamed", runtime.ParamLocationQuery, *params.Unnamed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvaluationConfigCreateRequest calls the generic EvaluationConfigCreate builder with application/json body
func NewEvaluationConfigCreateRequest(server string, body EvaluationConfigCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEvaluationConfigCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEvaluationConfigCreateRequestWithBody generates requests for EvaluationConfigCreate with any type of body
func NewEvaluationConfigCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/evaluation_config/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEvaluationConfigDestroyRequest generates requests for EvaluationConfigDestroy
func NewEvaluationConfigDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/evaluation_config/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvaluationConfigRetrieveRequest generates requests for EvaluationConfigRetrieve
func NewEvaluationConfigRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/evaluation_config/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvaluationConfigPartialUpdateRequest calls the generic EvaluationConfigPartialUpdate builder with application/json body
func NewEvaluationConfigPartialUpdateRequest(server string, id int, body EvaluationConfigPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEvaluationConfigPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEvaluationConfigPartialUpdateRequestWithBody generates requests for EvaluationConfigPartialUpdate with any type of body
func NewEvaluationConfigPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/evaluation_config/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEvaluationConfigUpdateRequest calls the generic EvaluationConfigUpdate builder with application/json body
func NewEvaluationConfigUpdateRequest(server string, id int, body EvaluationConfigUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEvaluationConfigUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEvaluationConfigUpdateRequestWithBody generates requests for EvaluationConfigUpdate with any type of body
func NewEvaluationConfigUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/evaluation_config/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewItemMetaDataListRequest generates requests for ItemMetaDataList
func NewItemMetaDataListRequest(server string, params *ItemMetaDataListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/item_meta_data/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Project != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewItemMetaDataCreateRequestWithBody generates requests for ItemMetaDataCreate with any type of body
func NewItemMetaDataCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/item_meta_data/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewItemMetaDataDestroyRequest generates requests for ItemMetaDataDestroy
func NewItemMetaDataDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/item_meta_data/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewItemMetaDataRetrieveRequest generates requests for ItemMetaDataRetrieve
func NewItemMetaDataRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/item_meta_data/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewItemMetaDataPartialUpdateRequestWithBody generates requests for ItemMetaDataPartialUpdate with any type of body
func NewItemMetaDataPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/item_meta_data/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewItemMetaDataUpdateRequestWithBody generates requests for ItemMetaDataUpdate with any type of body
func NewItemMetaDataUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/item_meta_data/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewItemMetaDataDownloadFileRetrieveRequest generates requests for ItemMetaDataDownloadFileRetrieve
func NewItemMetaDataDownloadFileRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/item_meta_data/%s/download_file/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewItemMetaDataUnlinkFileDestroyRequest generates requests for ItemMetaDataUnlinkFileDestroy
func NewItemMetaDataUnlinkFileDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/item_meta_data/%s/unlink_file/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModelConfigurationListRequest generates requests for ModelConfigurationList
func NewModelConfigurationListRequest(server string, params *ModelConfigurationListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/model_configuration/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Project != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModelConfigurationCreateRequest calls the generic ModelConfigurationCreate builder with application/json body
func NewModelConfigurationCreateRequest(server string, body ModelConfigurationCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModelConfigurationCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewModelConfigurationCreateRequestWithBody generates requests for ModelConfigurationCreate with any type of body
func NewModelConfigurationCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/model_configuration/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewModelConfigurationDestroyRequest generates requests for ModelConfigurationDestroy
func NewModelConfigurationDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/model_configuration/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModelConfigurationRetrieveRequest generates requests for ModelConfigurationRetrieve
func NewModelConfigurationRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/model_configuration/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModelConfigurationPartialUpdateRequest calls the generic ModelConfigurationPartialUpdate builder with application/json body
func NewModelConfigurationPartialUpdateRequest(server string, id int, body ModelConfigurationPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModelConfigurationPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewModelConfigurationPartialUpdateRequestWithBody generates requests for ModelConfigurationPartialUpdate with any type of body
func NewModelConfigurationPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/model_configuration/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewModelConfigurationUpdateRequest calls the generic ModelConfigurationUpdate builder with application/json body
func NewModelConfigurationUpdateRequest(server string, id int, body ModelConfigurationUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModelConfigurationUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewModelConfigurationUpdateRequestWithBody generates requests for ModelConfigurationUpdate with any type of body
func NewModelConfigurationUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/model_configuration/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewParameterTuningJobListRequest generates requests for ParameterTuningJobList
func NewParameterTuningJobListRequest(server string, params *ParameterTuningJobListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/parameter_tuning_job/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Data != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "data", runtime.ParamLocationQuery, *params.Data); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DataProject != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "data__project", runtime.ParamLocationQuery, *params.DataProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewParameterTuningJobCreateRequest calls the generic ParameterTuningJobCreate builder with application/json body
func NewParameterTuningJobCreateRequest(server string, body ParameterTuningJobCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewParameterTuningJobCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewParameterTuningJobCreateRequestWithBody generates requests for ParameterTuningJobCreate with any type of body
func NewParameterTuningJobCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/parameter_tuning_job/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewParameterTuningJobDestroyRequest generates requests for ParameterTuningJobDestroy
func NewParameterTuningJobDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/parameter_tuning_job/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewParameterTuningJobRetrieveRequest generates requests for ParameterTuningJobRetrieve
func NewParameterTuningJobRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/parameter_tuning_job/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewParameterTuningJobPartialUpdateRequest calls the generic ParameterTuningJobPartialUpdate builder with application/json body
func NewParameterTuningJobPartialUpdateRequest(server string, id int, body ParameterTuningJobPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewParameterTuningJobPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewParameterTuningJobPartialUpdateRequestWithBody generates requests for ParameterTuningJobPartialUpdate with any type of body
func NewParameterTuningJobPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/parameter_tuning_job/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewParameterTuningJobUpdateRequest calls the generic ParameterTuningJobUpdate builder with application/json body
func NewParameterTuningJobUpdateRequest(server string, id int, body ParameterTuningJobUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewParameterTuningJobUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewParameterTuningJobUpdateRequestWithBody generates requests for ParameterTuningJobUpdate with any type of body
func NewParameterTuningJobUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/parameter_tuning_job/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProjectListRequest generates requests for ProjectList
func NewProjectListRequest(server string, params *ProjectListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProjectCreateRequest calls the generic ProjectCreate builder with application/json body
func NewProjectCreateRequest(server string, body ProjectCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProjectCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProjectCreateRequestWithBody generates requests for ProjectCreate with any type of body
func NewProjectCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProjectDestroyRequest generates requests for ProjectDestroy
func NewProjectDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProjectRetrieveRequest generates requests for ProjectRetrieve
func NewProjectRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProjectPartialUpdateRequest calls the generic ProjectPartialUpdate builder with application/json body
func NewProjectPartialUpdateRequest(server string, id int, body ProjectPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProjectPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProjectPartialUpdateRequestWithBody generates requests for ProjectPartialUpdate with any type of body
func NewProjectPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProjectUpdateRequest calls the generic ProjectUpdate builder with application/json body
func NewProjectUpdateRequest(server string, id int, body ProjectUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProjectUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProjectUpdateRequestWithBody generates requests for ProjectUpdate with any type of body
func NewProjectUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProjectSummaryRetrieveRequest generates requests for ProjectSummaryRetrieve
func NewProjectSummaryRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/project_summary/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSchemaRetrieveRequest generates requests for SchemaRetrieve
func NewSchemaRetrieveRequest(server string, params *SchemaRetrieveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Lang != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lang", runtime.ParamLocationQuery, *params.Lang); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSplitConfigListRequest generates requests for SplitConfigList
func NewSplitConfigListRequest(server string, params *SplitConfigListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/split_config/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Unnamed != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unnamed", runtime.ParamLocationQuery, *params.Unnamed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSplitConfigCreateRequest calls the generic SplitConfigCreate builder with application/json body
func NewSplitConfigCreateRequest(server string, body SplitConfigCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSplitConfigCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSplitConfigCreateRequestWithBody generates requests for SplitConfigCreate with any type of body
func NewSplitConfigCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/split_config/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSplitConfigDestroyRequest generates requests for SplitConfigDestroy
func NewSplitConfigDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/split_config/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSplitConfigRetrieveRequest generates requests for SplitConfigRetrieve
func NewSplitConfigRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/split_config/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSplitConfigPartialUpdateRequest calls the generic SplitConfigPartialUpdate builder with application/json body
func NewSplitConfigPartialUpdateRequest(server string, id int, body SplitConfigPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSplitConfigPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSplitConfigPartialUpdateRequestWithBody generates requests for SplitConfigPartialUpdate with any type of body
func NewSplitConfigPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/split_config/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSplitConfigUpdateRequest calls the generic SplitConfigUpdate builder with application/json body
func NewSplitConfigUpdateRequest(server string, id int, body SplitConfigUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSplitConfigUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSplitConfigUpdateRequestWithBody generates requests for SplitConfigUpdate with any type of body
func NewSplitConfigUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/split_config/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTaskLogListRequest generates requests for TaskLogList
func NewTaskLogListRequest(server string, params *TaskLogListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/task_log/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IdGt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ModelId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "model_id", runtime.ParamLocationQuery, *params.ModelId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TuningJobId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tuning_job_id", runtime.ParamLocationQuery, *params.TuningJobId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTaskLogRetrieveRequest generates requests for TaskLogRetrieve
func NewTaskLogRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/task_log/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTokenCreateRequest calls the generic TokenCreate builder with application/json body
func NewTokenCreateRequest(server string, body TokenCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTokenCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTokenCreateRequestWithBody generates requests for TokenCreate with any type of body
func NewTokenCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/token/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTrainedModelListRequest generates requests for TrainedModelList
func NewTrainedModelListRequest(server string, params *TrainedModelListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trained_model/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.DataLoc != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "data_loc", runtime.ParamLocationQuery, *params.DataLoc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DataLocProject != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "data_loc__project", runtime.ParamLocationQuery, *params.DataLocProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTrainedModelCreateRequest calls the generic TrainedModelCreate builder with application/json body
func NewTrainedModelCreateRequest(server string, body TrainedModelCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTrainedModelCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTrainedModelCreateRequestWithBody generates requests for TrainedModelCreate with any type of body
func NewTrainedModelCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trained_model/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTrainedModelDestroyRequest generates requests for TrainedModelDestroy
func NewTrainedModelDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trained_model/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTrainedModelRetrieveRequest generates requests for TrainedModelRetrieve
func NewTrainedModelRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trained_model/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTrainedModelPartialUpdateRequest calls the generic TrainedModelPartialUpdate builder with application/json body
func NewTrainedModelPartialUpdateRequest(server string, id int, body TrainedModelPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTrainedModelPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTrainedModelPartialUpdateRequestWithBody generates requests for TrainedModelPartialUpdate with any type of body
func NewTrainedModelPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trained_model/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTrainedModelUpdateRequest calls the generic TrainedModelUpdate builder with application/json body
func NewTrainedModelUpdateRequest(server string, id int, body TrainedModelUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTrainedModelUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTrainedModelUpdateRequestWithBody generates requests for TrainedModelUpdate with any type of body
func NewTrainedModelUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trained_model/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTrainedModelDownloadFileRetrieveRequest generates requests for TrainedModelDownloadFileRetrieve
func NewTrainedModelDownloadFileRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trained_model/%s/download_file/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTrainedModelSampleRecommendationMetadataRetrieveRequest generates requests for TrainedModelSampleRecommendationMetadataRetrieve
func NewTrainedModelSampleRecommendationMetadataRetrieveRequest(server string, id int, metadataId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metadata_id", runtime.ParamLocationPath, metadataId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trained_model/%s/sample_recommendation_metadata/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTrainedModelSampleRecommendationRawRetrieveRequest generates requests for TrainedModelSampleRecommendationRawRetrieve
func NewTrainedModelSampleRecommendationRawRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trained_model/%s/sample_recommendation_raw/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTrainedModelUnlinkFileDestroyRequest generates requests for TrainedModelUnlinkFileDestroy
func NewTrainedModelUnlinkFileDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trained_model/%s/unlink_file/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTrainingDataListRequest generates requests for TrainingDataList
func NewTrainingDataListRequest(server string, params *TrainingDataListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/training_data/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Project != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTrainingDataCreateRequestWithBody generates requests for TrainingDataCreate with any type of body
func NewTrainingDataCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/training_data/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTrainingDataDestroyRequest generates requests for TrainingDataDestroy
func NewTrainingDataDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/training_data/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTrainingDataRetrieveRequest generates requests for TrainingDataRetrieve
func NewTrainingDataRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/training_data/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTrainingDataPartialUpdateRequestWithBody generates requests for TrainingDataPartialUpdate with any type of body
func NewTrainingDataPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/training_data/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTrainingDataUpdateRequestWithBody generates requests for TrainingDataUpdate with any type of body
func NewTrainingDataUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/training_data/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTrainingDataDownloadFileRetrieveRequest generates requests for TrainingDataDownloadFileRetrieve
func NewTrainingDataDownloadFileRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/training_data/%s/download_file/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTrainingDataUnlinkFileDestroyRequest generates requests for TrainingDataUnlinkFileDestroy
func NewTrainingDataUnlinkFileDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/training_data/%s/unlink_file/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AuthLoginCreate request  with any body
	AuthLoginCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthLoginCreateResponse, error)

	AuthLoginCreateWithResponse(ctx context.Context, body AuthLoginCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthLoginCreateResponse, error)

	// AuthLogoutCreate request
	AuthLogoutCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthLogoutCreateResponse, error)

	// AuthPasswordChangeCreate request  with any body
	AuthPasswordChangeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordChangeCreateResponse, error)

	AuthPasswordChangeCreateWithResponse(ctx context.Context, body AuthPasswordChangeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordChangeCreateResponse, error)

	// AuthPasswordResetCreate request  with any body
	AuthPasswordResetCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordResetCreateResponse, error)

	AuthPasswordResetCreateWithResponse(ctx context.Context, body AuthPasswordResetCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordResetCreateResponse, error)

	// AuthPasswordResetConfirmCreate request  with any body
	AuthPasswordResetConfirmCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordResetConfirmCreateResponse, error)

	AuthPasswordResetConfirmCreateWithResponse(ctx context.Context, body AuthPasswordResetConfirmCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordResetConfirmCreateResponse, error)

	// AuthTokenRefreshCreate request  with any body
	AuthTokenRefreshCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthTokenRefreshCreateResponse, error)

	AuthTokenRefreshCreateWithResponse(ctx context.Context, body AuthTokenRefreshCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthTokenRefreshCreateResponse, error)

	// AuthTokenVerifyCreate request  with any body
	AuthTokenVerifyCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthTokenVerifyCreateResponse, error)

	AuthTokenVerifyCreateWithResponse(ctx context.Context, body AuthTokenVerifyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthTokenVerifyCreateResponse, error)

	// AuthUserRetrieve request
	AuthUserRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthUserRetrieveResponse, error)

	// AuthUserPartialUpdate request  with any body
	AuthUserPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthUserPartialUpdateResponse, error)

	AuthUserPartialUpdateWithResponse(ctx context.Context, body AuthUserPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthUserPartialUpdateResponse, error)

	// AuthUserUpdate request  with any body
	AuthUserUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthUserUpdateResponse, error)

	AuthUserUpdateWithResponse(ctx context.Context, body AuthUserUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthUserUpdateResponse, error)

	// EvaluationConfigList request
	EvaluationConfigListWithResponse(ctx context.Context, params *EvaluationConfigListParams, reqEditors ...RequestEditorFn) (*EvaluationConfigListResponse, error)

	// EvaluationConfigCreate request  with any body
	EvaluationConfigCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluationConfigCreateResponse, error)

	EvaluationConfigCreateWithResponse(ctx context.Context, body EvaluationConfigCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluationConfigCreateResponse, error)

	// EvaluationConfigDestroy request
	EvaluationConfigDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EvaluationConfigDestroyResponse, error)

	// EvaluationConfigRetrieve request
	EvaluationConfigRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EvaluationConfigRetrieveResponse, error)

	// EvaluationConfigPartialUpdate request  with any body
	EvaluationConfigPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluationConfigPartialUpdateResponse, error)

	EvaluationConfigPartialUpdateWithResponse(ctx context.Context, id int, body EvaluationConfigPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluationConfigPartialUpdateResponse, error)

	// EvaluationConfigUpdate request  with any body
	EvaluationConfigUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluationConfigUpdateResponse, error)

	EvaluationConfigUpdateWithResponse(ctx context.Context, id int, body EvaluationConfigUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluationConfigUpdateResponse, error)

	// ItemMetaDataList request
	ItemMetaDataListWithResponse(ctx context.Context, params *ItemMetaDataListParams, reqEditors ...RequestEditorFn) (*ItemMetaDataListResponse, error)

	// ItemMetaDataCreate request  with any body
	ItemMetaDataCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ItemMetaDataCreateResponse, error)

	// ItemMetaDataDestroy request
	ItemMetaDataDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ItemMetaDataDestroyResponse, error)

	// ItemMetaDataRetrieve request
	ItemMetaDataRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ItemMetaDataRetrieveResponse, error)

	// ItemMetaDataPartialUpdate request  with any body
	ItemMetaDataPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ItemMetaDataPartialUpdateResponse, error)

	// ItemMetaDataUpdate request  with any body
	ItemMetaDataUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ItemMetaDataUpdateResponse, error)

	// ItemMetaDataDownloadFileRetrieve request
	ItemMetaDataDownloadFileRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ItemMetaDataDownloadFileRetrieveResponse, error)

	// ItemMetaDataUnlinkFileDestroy request
	ItemMetaDataUnlinkFileDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ItemMetaDataUnlinkFileDestroyResponse, error)

	// ModelConfigurationList request
	ModelConfigurationListWithResponse(ctx context.Context, params *ModelConfigurationListParams, reqEditors ...RequestEditorFn) (*ModelConfigurationListResponse, error)

	// ModelConfigurationCreate request  with any body
	ModelConfigurationCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModelConfigurationCreateResponse, error)

	ModelConfigurationCreateWithResponse(ctx context.Context, body ModelConfigurationCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ModelConfigurationCreateResponse, error)

	// ModelConfigurationDestroy request
	ModelConfigurationDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ModelConfigurationDestroyResponse, error)

	// ModelConfigurationRetrieve request
	ModelConfigurationRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ModelConfigurationRetrieveResponse, error)

	// ModelConfigurationPartialUpdate request  with any body
	ModelConfigurationPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModelConfigurationPartialUpdateResponse, error)

	ModelConfigurationPartialUpdateWithResponse(ctx context.Context, id int, body ModelConfigurationPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ModelConfigurationPartialUpdateResponse, error)

	// ModelConfigurationUpdate request  with any body
	ModelConfigurationUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModelConfigurationUpdateResponse, error)

	ModelConfigurationUpdateWithResponse(ctx context.Context, id int, body ModelConfigurationUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ModelConfigurationUpdateResponse, error)

	// ParameterTuningJobList request
	ParameterTuningJobListWithResponse(ctx context.Context, params *ParameterTuningJobListParams, reqEditors ...RequestEditorFn) (*ParameterTuningJobListResponse, error)

	// ParameterTuningJobCreate request  with any body
	ParameterTuningJobCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ParameterTuningJobCreateResponse, error)

	ParameterTuningJobCreateWithResponse(ctx context.Context, body ParameterTuningJobCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ParameterTuningJobCreateResponse, error)

	// ParameterTuningJobDestroy request
	ParameterTuningJobDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ParameterTuningJobDestroyResponse, error)

	// ParameterTuningJobRetrieve request
	ParameterTuningJobRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ParameterTuningJobRetrieveResponse, error)

	// ParameterTuningJobPartialUpdate request  with any body
	ParameterTuningJobPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ParameterTuningJobPartialUpdateResponse, error)

	ParameterTuningJobPartialUpdateWithResponse(ctx context.Context, id int, body ParameterTuningJobPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ParameterTuningJobPartialUpdateResponse, error)

	// ParameterTuningJobUpdate request  with any body
	ParameterTuningJobUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ParameterTuningJobUpdateResponse, error)

	ParameterTuningJobUpdateWithResponse(ctx context.Context, id int, body ParameterTuningJobUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ParameterTuningJobUpdateResponse, error)

	// ProjectList request
	ProjectListWithResponse(ctx context.Context, params *ProjectListParams, reqEditors ...RequestEditorFn) (*ProjectListResponse, error)

	// ProjectCreate request  with any body
	ProjectCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectCreateResponse, error)

	ProjectCreateWithResponse(ctx context.Context, body ProjectCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectCreateResponse, error)

	// ProjectDestroy request
	ProjectDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProjectDestroyResponse, error)

	// ProjectRetrieve request
	ProjectRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProjectRetrieveResponse, error)

	// ProjectPartialUpdate request  with any body
	ProjectPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectPartialUpdateResponse, error)

	ProjectPartialUpdateWithResponse(ctx context.Context, id int, body ProjectPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectPartialUpdateResponse, error)

	// ProjectUpdate request  with any body
	ProjectUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectUpdateResponse, error)

	ProjectUpdateWithResponse(ctx context.Context, id int, body ProjectUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectUpdateResponse, error)

	// ProjectSummaryRetrieve request
	ProjectSummaryRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProjectSummaryRetrieveResponse, error)

	// SchemaRetrieve request
	SchemaRetrieveWithResponse(ctx context.Context, params *SchemaRetrieveParams, reqEditors ...RequestEditorFn) (*SchemaRetrieveResponse, error)

	// SplitConfigList request
	SplitConfigListWithResponse(ctx context.Context, params *SplitConfigListParams, reqEditors ...RequestEditorFn) (*SplitConfigListResponse, error)

	// SplitConfigCreate request  with any body
	SplitConfigCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SplitConfigCreateResponse, error)

	SplitConfigCreateWithResponse(ctx context.Context, body SplitConfigCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SplitConfigCreateResponse, error)

	// SplitConfigDestroy request
	SplitConfigDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SplitConfigDestroyResponse, error)

	// SplitConfigRetrieve request
	SplitConfigRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SplitConfigRetrieveResponse, error)

	// SplitConfigPartialUpdate request  with any body
	SplitConfigPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SplitConfigPartialUpdateResponse, error)

	SplitConfigPartialUpdateWithResponse(ctx context.Context, id int, body SplitConfigPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SplitConfigPartialUpdateResponse, error)

	// SplitConfigUpdate request  with any body
	SplitConfigUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SplitConfigUpdateResponse, error)

	SplitConfigUpdateWithResponse(ctx context.Context, id int, body SplitConfigUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SplitConfigUpdateResponse, error)

	// TaskLogList request
	TaskLogListWithResponse(ctx context.Context, params *TaskLogListParams, reqEditors ...RequestEditorFn) (*TaskLogListResponse, error)

	// TaskLogRetrieve request
	TaskLogRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TaskLogRetrieveResponse, error)

	// TokenCreate request  with any body
	TokenCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenCreateResponse, error)

	TokenCreateWithResponse(ctx context.Context, body TokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenCreateResponse, error)

	// TrainedModelList request
	TrainedModelListWithResponse(ctx context.Context, params *TrainedModelListParams, reqEditors ...RequestEditorFn) (*TrainedModelListResponse, error)

	// TrainedModelCreate request  with any body
	TrainedModelCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainedModelCreateResponse, error)

	TrainedModelCreateWithResponse(ctx context.Context, body TrainedModelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TrainedModelCreateResponse, error)

	// TrainedModelDestroy request
	TrainedModelDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainedModelDestroyResponse, error)

	// TrainedModelRetrieve request
	TrainedModelRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainedModelRetrieveResponse, error)

	// TrainedModelPartialUpdate request  with any body
	TrainedModelPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainedModelPartialUpdateResponse, error)

	TrainedModelPartialUpdateWithResponse(ctx context.Context, id int, body TrainedModelPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TrainedModelPartialUpdateResponse, error)

	// TrainedModelUpdate request  with any body
	TrainedModelUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainedModelUpdateResponse, error)

	TrainedModelUpdateWithResponse(ctx context.Context, id int, body TrainedModelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TrainedModelUpdateResponse, error)

	// TrainedModelDownloadFileRetrieve request
	TrainedModelDownloadFileRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainedModelDownloadFileRetrieveResponse, error)

	// TrainedModelSampleRecommendationMetadataRetrieve request
	TrainedModelSampleRecommendationMetadataRetrieveWithResponse(ctx context.Context, id int, metadataId string, reqEditors ...RequestEditorFn) (*TrainedModelSampleRecommendationMetadataRetrieveResponse, error)

	// TrainedModelSampleRecommendationRawRetrieve request
	TrainedModelSampleRecommendationRawRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainedModelSampleRecommendationRawRetrieveResponse, error)

	// TrainedModelUnlinkFileDestroy request
	TrainedModelUnlinkFileDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainedModelUnlinkFileDestroyResponse, error)

	// TrainingDataList request
	TrainingDataListWithResponse(ctx context.Context, params *TrainingDataListParams, reqEditors ...RequestEditorFn) (*TrainingDataListResponse, error)

	// TrainingDataCreate request  with any body
	TrainingDataCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainingDataCreateResponse, error)

	// TrainingDataDestroy request
	TrainingDataDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainingDataDestroyResponse, error)

	// TrainingDataRetrieve request
	TrainingDataRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainingDataRetrieveResponse, error)

	// TrainingDataPartialUpdate request  with any body
	TrainingDataPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainingDataPartialUpdateResponse, error)

	// TrainingDataUpdate request  with any body
	TrainingDataUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainingDataUpdateResponse, error)

	// TrainingDataDownloadFileRetrieve request
	TrainingDataDownloadFileRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainingDataDownloadFileRetrieveResponse, error)

	// TrainingDataUnlinkFileDestroy request
	TrainingDataUnlinkFileDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainingDataUnlinkFileDestroyResponse, error)
}

type AuthLoginCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JWT
}

// Status returns HTTPResponse.Status
func (r AuthLoginCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthLoginCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthLogoutCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RestAuthDetail
}

// Status returns HTTPResponse.Status
func (r AuthLogoutCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthLogoutCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordChangeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RestAuthDetail
}

// Status returns HTTPResponse.Status
func (r AuthPasswordChangeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordChangeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordResetCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RestAuthDetail
}

// Status returns HTTPResponse.Status
func (r AuthPasswordResetCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordResetCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthPasswordResetConfirmCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RestAuthDetail
}

// Status returns HTTPResponse.Status
func (r AuthPasswordResetConfirmCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthPasswordResetConfirmCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthTokenRefreshCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenRefresh
}

// Status returns HTTPResponse.Status
func (r AuthTokenRefreshCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenRefreshCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthTokenVerifyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenVerify
}

// Status returns HTTPResponse.Status
func (r AuthTokenVerifyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenVerifyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthUserRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserDetails
}

// Status returns HTTPResponse.Status
func (r AuthUserRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthUserRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthUserPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserDetails
}

// Status returns HTTPResponse.Status
func (r AuthUserPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthUserPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthUserUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserDetails
}

// Status returns HTTPResponse.Status
func (r AuthUserUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthUserUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluationConfigListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EvaluationConfig
}

// Status returns HTTPResponse.Status
func (r EvaluationConfigListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluationConfigListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluationConfigCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EvaluationConfig
}

// Status returns HTTPResponse.Status
func (r EvaluationConfigCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluationConfigCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluationConfigDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EvaluationConfigDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluationConfigDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluationConfigRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EvaluationConfig
}

// Status returns HTTPResponse.Status
func (r EvaluationConfigRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluationConfigRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluationConfigPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EvaluationConfig
}

// Status returns HTTPResponse.Status
func (r EvaluationConfigPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluationConfigPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluationConfigUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EvaluationConfig
}

// Status returns HTTPResponse.Status
func (r EvaluationConfigUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluationConfigUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ItemMetaDataListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedItemMetaDataList
}

// Status returns HTTPResponse.Status
func (r ItemMetaDataListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ItemMetaDataListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ItemMetaDataCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ItemMetaData
}

// Status returns HTTPResponse.Status
func (r ItemMetaDataCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ItemMetaDataCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ItemMetaDataDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ItemMetaDataDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ItemMetaDataDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ItemMetaDataRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ItemMetaData
}

// Status returns HTTPResponse.Status
func (r ItemMetaDataRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ItemMetaDataRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ItemMetaDataPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ItemMetaData
}

// Status returns HTTPResponse.Status
func (r ItemMetaDataPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ItemMetaDataPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ItemMetaDataUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ItemMetaData
}

// Status returns HTTPResponse.Status
func (r ItemMetaDataUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ItemMetaDataUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ItemMetaDataDownloadFileRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ItemMetaData
}

// Status returns HTTPResponse.Status
func (r ItemMetaDataDownloadFileRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ItemMetaDataDownloadFileRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ItemMetaDataUnlinkFileDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ItemMetaDataUnlinkFileDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ItemMetaDataUnlinkFileDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModelConfigurationListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedModelConfigurationList
}

// Status returns HTTPResponse.Status
func (r ModelConfigurationListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModelConfigurationListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModelConfigurationCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ModelConfiguration
}

// Status returns HTTPResponse.Status
func (r ModelConfigurationCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModelConfigurationCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModelConfigurationDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ModelConfigurationDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModelConfigurationDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModelConfigurationRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelConfiguration
}

// Status returns HTTPResponse.Status
func (r ModelConfigurationRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModelConfigurationRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModelConfigurationPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelConfiguration
}

// Status returns HTTPResponse.Status
func (r ModelConfigurationPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModelConfigurationPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModelConfigurationUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelConfiguration
}

// Status returns HTTPResponse.Status
func (r ModelConfigurationUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModelConfigurationUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ParameterTuningJobListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedParameterTuningJobList
}

// Status returns HTTPResponse.Status
func (r ParameterTuningJobListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ParameterTuningJobListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ParameterTuningJobCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ParameterTuningJob
}

// Status returns HTTPResponse.Status
func (r ParameterTuningJobCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ParameterTuningJobCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ParameterTuningJobDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ParameterTuningJobDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ParameterTuningJobDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ParameterTuningJobRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ParameterTuningJob
}

// Status returns HTTPResponse.Status
func (r ParameterTuningJobRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ParameterTuningJobRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ParameterTuningJobPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ParameterTuningJob
}

// Status returns HTTPResponse.Status
func (r ParameterTuningJobPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ParameterTuningJobPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ParameterTuningJobUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ParameterTuningJob
}

// Status returns HTTPResponse.Status
func (r ParameterTuningJobUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ParameterTuningJobUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Project
}

// Status returns HTTPResponse.Status
func (r ProjectListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Project
}

// Status returns HTTPResponse.Status
func (r ProjectCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProjectDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r ProjectRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r ProjectPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r ProjectUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectSummaryRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProjectSummaryRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectSummaryRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SchemaRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	}
	YAML200 *struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r SchemaRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SchemaRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SplitConfigListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SplitConfig
}

// Status returns HTTPResponse.Status
func (r SplitConfigListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SplitConfigListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SplitConfigCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SplitConfig
}

// Status returns HTTPResponse.Status
func (r SplitConfigCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SplitConfigCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SplitConfigDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SplitConfigDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SplitConfigDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SplitConfigRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SplitConfig
}

// Status returns HTTPResponse.Status
func (r SplitConfigRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SplitConfigRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SplitConfigPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SplitConfig
}

// Status returns HTTPResponse.Status
func (r SplitConfigPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SplitConfigPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SplitConfigUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SplitConfig
}

// Status returns HTTPResponse.Status
func (r SplitConfigUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SplitConfigUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TaskLogListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TaskLog
}

// Status returns HTTPResponse.Status
func (r TaskLogListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TaskLogListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TaskLogRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskLog
}

// Status returns HTTPResponse.Status
func (r TaskLogRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TaskLogRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TokenCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthToken
}

// Status returns HTTPResponse.Status
func (r TokenCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TokenCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainedModelListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTrainedModelList
}

// Status returns HTTPResponse.Status
func (r TrainedModelListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainedModelListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainedModelCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TrainedModel
}

// Status returns HTTPResponse.Status
func (r TrainedModelCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainedModelCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainedModelDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TrainedModelDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainedModelDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainedModelRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrainedModel
}

// Status returns HTTPResponse.Status
func (r TrainedModelRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainedModelRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainedModelPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrainedModel
}

// Status returns HTTPResponse.Status
func (r TrainedModelPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainedModelPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainedModelUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrainedModel
}

// Status returns HTTPResponse.Status
func (r TrainedModelUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainedModelUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainedModelDownloadFileRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrainedModel
}

// Status returns HTTPResponse.Status
func (r TrainedModelDownloadFileRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainedModelDownloadFileRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainedModelSampleRecommendationMetadataRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecommendationWithMetaData
}

// Status returns HTTPResponse.Status
func (r TrainedModelSampleRecommendationMetadataRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainedModelSampleRecommendationMetadataRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainedModelSampleRecommendationRawRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RawRecommendation
}

// Status returns HTTPResponse.Status
func (r TrainedModelSampleRecommendationRawRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainedModelSampleRecommendationRawRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainedModelUnlinkFileDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TrainedModelUnlinkFileDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainedModelUnlinkFileDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainingDataListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTrainingDataList
}

// Status returns HTTPResponse.Status
func (r TrainingDataListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainingDataListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainingDataCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TrainingData
}

// Status returns HTTPResponse.Status
func (r TrainingDataCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainingDataCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainingDataDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TrainingDataDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainingDataDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainingDataRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrainingData
}

// Status returns HTTPResponse.Status
func (r TrainingDataRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainingDataRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainingDataPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrainingData
}

// Status returns HTTPResponse.Status
func (r TrainingDataPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainingDataPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainingDataUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrainingData
}

// Status returns HTTPResponse.Status
func (r TrainingDataUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainingDataUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainingDataDownloadFileRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrainingData
}

// Status returns HTTPResponse.Status
func (r TrainingDataDownloadFileRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainingDataDownloadFileRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TrainingDataUnlinkFileDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TrainingDataUnlinkFileDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TrainingDataUnlinkFileDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AuthLoginCreateWithBodyWithResponse request with arbitrary body returning *AuthLoginCreateResponse
func (c *ClientWithResponses) AuthLoginCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthLoginCreateResponse, error) {
	rsp, err := c.AuthLoginCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthLoginCreateResponse(rsp)
}

func (c *ClientWithResponses) AuthLoginCreateWithResponse(ctx context.Context, body AuthLoginCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthLoginCreateResponse, error) {
	rsp, err := c.AuthLoginCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthLoginCreateResponse(rsp)
}

// AuthLogoutCreateWithResponse request returning *AuthLogoutCreateResponse
func (c *ClientWithResponses) AuthLogoutCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthLogoutCreateResponse, error) {
	rsp, err := c.AuthLogoutCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthLogoutCreateResponse(rsp)
}

// AuthPasswordChangeCreateWithBodyWithResponse request with arbitrary body returning *AuthPasswordChangeCreateResponse
func (c *ClientWithResponses) AuthPasswordChangeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordChangeCreateResponse, error) {
	rsp, err := c.AuthPasswordChangeCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordChangeCreateResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordChangeCreateWithResponse(ctx context.Context, body AuthPasswordChangeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordChangeCreateResponse, error) {
	rsp, err := c.AuthPasswordChangeCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordChangeCreateResponse(rsp)
}

// AuthPasswordResetCreateWithBodyWithResponse request with arbitrary body returning *AuthPasswordResetCreateResponse
func (c *ClientWithResponses) AuthPasswordResetCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordResetCreateResponse, error) {
	rsp, err := c.AuthPasswordResetCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordResetCreateResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordResetCreateWithResponse(ctx context.Context, body AuthPasswordResetCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordResetCreateResponse, error) {
	rsp, err := c.AuthPasswordResetCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordResetCreateResponse(rsp)
}

// AuthPasswordResetConfirmCreateWithBodyWithResponse request with arbitrary body returning *AuthPasswordResetConfirmCreateResponse
func (c *ClientWithResponses) AuthPasswordResetConfirmCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthPasswordResetConfirmCreateResponse, error) {
	rsp, err := c.AuthPasswordResetConfirmCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordResetConfirmCreateResponse(rsp)
}

func (c *ClientWithResponses) AuthPasswordResetConfirmCreateWithResponse(ctx context.Context, body AuthPasswordResetConfirmCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthPasswordResetConfirmCreateResponse, error) {
	rsp, err := c.AuthPasswordResetConfirmCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthPasswordResetConfirmCreateResponse(rsp)
}

// AuthTokenRefreshCreateWithBodyWithResponse request with arbitrary body returning *AuthTokenRefreshCreateResponse
func (c *ClientWithResponses) AuthTokenRefreshCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthTokenRefreshCreateResponse, error) {
	rsp, err := c.AuthTokenRefreshCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenRefreshCreateResponse(rsp)
}

func (c *ClientWithResponses) AuthTokenRefreshCreateWithResponse(ctx context.Context, body AuthTokenRefreshCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthTokenRefreshCreateResponse, error) {
	rsp, err := c.AuthTokenRefreshCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenRefreshCreateResponse(rsp)
}

// AuthTokenVerifyCreateWithBodyWithResponse request with arbitrary body returning *AuthTokenVerifyCreateResponse
func (c *ClientWithResponses) AuthTokenVerifyCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthTokenVerifyCreateResponse, error) {
	rsp, err := c.AuthTokenVerifyCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenVerifyCreateResponse(rsp)
}

func (c *ClientWithResponses) AuthTokenVerifyCreateWithResponse(ctx context.Context, body AuthTokenVerifyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthTokenVerifyCreateResponse, error) {
	rsp, err := c.AuthTokenVerifyCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenVerifyCreateResponse(rsp)
}

// AuthUserRetrieveWithResponse request returning *AuthUserRetrieveResponse
func (c *ClientWithResponses) AuthUserRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthUserRetrieveResponse, error) {
	rsp, err := c.AuthUserRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthUserRetrieveResponse(rsp)
}

// AuthUserPartialUpdateWithBodyWithResponse request with arbitrary body returning *AuthUserPartialUpdateResponse
func (c *ClientWithResponses) AuthUserPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthUserPartialUpdateResponse, error) {
	rsp, err := c.AuthUserPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthUserPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) AuthUserPartialUpdateWithResponse(ctx context.Context, body AuthUserPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthUserPartialUpdateResponse, error) {
	rsp, err := c.AuthUserPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthUserPartialUpdateResponse(rsp)
}

// AuthUserUpdateWithBodyWithResponse request with arbitrary body returning *AuthUserUpdateResponse
func (c *ClientWithResponses) AuthUserUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthUserUpdateResponse, error) {
	rsp, err := c.AuthUserUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthUserUpdateResponse(rsp)
}

func (c *ClientWithResponses) AuthUserUpdateWithResponse(ctx context.Context, body AuthUserUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthUserUpdateResponse, error) {
	rsp, err := c.AuthUserUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthUserUpdateResponse(rsp)
}

// EvaluationConfigListWithResponse request returning *EvaluationConfigListResponse
func (c *ClientWithResponses) EvaluationConfigListWithResponse(ctx context.Context, params *EvaluationConfigListParams, reqEditors ...RequestEditorFn) (*EvaluationConfigListResponse, error) {
	rsp, err := c.EvaluationConfigList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluationConfigListResponse(rsp)
}

// EvaluationConfigCreateWithBodyWithResponse request with arbitrary body returning *EvaluationConfigCreateResponse
func (c *ClientWithResponses) EvaluationConfigCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluationConfigCreateResponse, error) {
	rsp, err := c.EvaluationConfigCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluationConfigCreateResponse(rsp)
}

func (c *ClientWithResponses) EvaluationConfigCreateWithResponse(ctx context.Context, body EvaluationConfigCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluationConfigCreateResponse, error) {
	rsp, err := c.EvaluationConfigCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluationConfigCreateResponse(rsp)
}

// EvaluationConfigDestroyWithResponse request returning *EvaluationConfigDestroyResponse
func (c *ClientWithResponses) EvaluationConfigDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EvaluationConfigDestroyResponse, error) {
	rsp, err := c.EvaluationConfigDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluationConfigDestroyResponse(rsp)
}

// EvaluationConfigRetrieveWithResponse request returning *EvaluationConfigRetrieveResponse
func (c *ClientWithResponses) EvaluationConfigRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EvaluationConfigRetrieveResponse, error) {
	rsp, err := c.EvaluationConfigRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluationConfigRetrieveResponse(rsp)
}

// EvaluationConfigPartialUpdateWithBodyWithResponse request with arbitrary body returning *EvaluationConfigPartialUpdateResponse
func (c *ClientWithResponses) EvaluationConfigPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluationConfigPartialUpdateResponse, error) {
	rsp, err := c.EvaluationConfigPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluationConfigPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EvaluationConfigPartialUpdateWithResponse(ctx context.Context, id int, body EvaluationConfigPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluationConfigPartialUpdateResponse, error) {
	rsp, err := c.EvaluationConfigPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluationConfigPartialUpdateResponse(rsp)
}

// EvaluationConfigUpdateWithBodyWithResponse request with arbitrary body returning *EvaluationConfigUpdateResponse
func (c *ClientWithResponses) EvaluationConfigUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluationConfigUpdateResponse, error) {
	rsp, err := c.EvaluationConfigUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluationConfigUpdateResponse(rsp)
}

func (c *ClientWithResponses) EvaluationConfigUpdateWithResponse(ctx context.Context, id int, body EvaluationConfigUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluationConfigUpdateResponse, error) {
	rsp, err := c.EvaluationConfigUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluationConfigUpdateResponse(rsp)
}

// ItemMetaDataListWithResponse request returning *ItemMetaDataListResponse
func (c *ClientWithResponses) ItemMetaDataListWithResponse(ctx context.Context, params *ItemMetaDataListParams, reqEditors ...RequestEditorFn) (*ItemMetaDataListResponse, error) {
	rsp, err := c.ItemMetaDataList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseItemMetaDataListResponse(rsp)
}

// ItemMetaDataCreateWithBodyWithResponse request with arbitrary body returning *ItemMetaDataCreateResponse
func (c *ClientWithResponses) ItemMetaDataCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ItemMetaDataCreateResponse, error) {
	rsp, err := c.ItemMetaDataCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseItemMetaDataCreateResponse(rsp)
}

// ItemMetaDataDestroyWithResponse request returning *ItemMetaDataDestroyResponse
func (c *ClientWithResponses) ItemMetaDataDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ItemMetaDataDestroyResponse, error) {
	rsp, err := c.ItemMetaDataDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseItemMetaDataDestroyResponse(rsp)
}

// ItemMetaDataRetrieveWithResponse request returning *ItemMetaDataRetrieveResponse
func (c *ClientWithResponses) ItemMetaDataRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ItemMetaDataRetrieveResponse, error) {
	rsp, err := c.ItemMetaDataRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseItemMetaDataRetrieveResponse(rsp)
}

// ItemMetaDataPartialUpdateWithBodyWithResponse request with arbitrary body returning *ItemMetaDataPartialUpdateResponse
func (c *ClientWithResponses) ItemMetaDataPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ItemMetaDataPartialUpdateResponse, error) {
	rsp, err := c.ItemMetaDataPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseItemMetaDataPartialUpdateResponse(rsp)
}

// ItemMetaDataUpdateWithBodyWithResponse request with arbitrary body returning *ItemMetaDataUpdateResponse
func (c *ClientWithResponses) ItemMetaDataUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ItemMetaDataUpdateResponse, error) {
	rsp, err := c.ItemMetaDataUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseItemMetaDataUpdateResponse(rsp)
}

// ItemMetaDataDownloadFileRetrieveWithResponse request returning *ItemMetaDataDownloadFileRetrieveResponse
func (c *ClientWithResponses) ItemMetaDataDownloadFileRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ItemMetaDataDownloadFileRetrieveResponse, error) {
	rsp, err := c.ItemMetaDataDownloadFileRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseItemMetaDataDownloadFileRetrieveResponse(rsp)
}

// ItemMetaDataUnlinkFileDestroyWithResponse request returning *ItemMetaDataUnlinkFileDestroyResponse
func (c *ClientWithResponses) ItemMetaDataUnlinkFileDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ItemMetaDataUnlinkFileDestroyResponse, error) {
	rsp, err := c.ItemMetaDataUnlinkFileDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseItemMetaDataUnlinkFileDestroyResponse(rsp)
}

// ModelConfigurationListWithResponse request returning *ModelConfigurationListResponse
func (c *ClientWithResponses) ModelConfigurationListWithResponse(ctx context.Context, params *ModelConfigurationListParams, reqEditors ...RequestEditorFn) (*ModelConfigurationListResponse, error) {
	rsp, err := c.ModelConfigurationList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelConfigurationListResponse(rsp)
}

// ModelConfigurationCreateWithBodyWithResponse request with arbitrary body returning *ModelConfigurationCreateResponse
func (c *ClientWithResponses) ModelConfigurationCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModelConfigurationCreateResponse, error) {
	rsp, err := c.ModelConfigurationCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelConfigurationCreateResponse(rsp)
}

func (c *ClientWithResponses) ModelConfigurationCreateWithResponse(ctx context.Context, body ModelConfigurationCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ModelConfigurationCreateResponse, error) {
	rsp, err := c.ModelConfigurationCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelConfigurationCreateResponse(rsp)
}

// ModelConfigurationDestroyWithResponse request returning *ModelConfigurationDestroyResponse
func (c *ClientWithResponses) ModelConfigurationDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ModelConfigurationDestroyResponse, error) {
	rsp, err := c.ModelConfigurationDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelConfigurationDestroyResponse(rsp)
}

// ModelConfigurationRetrieveWithResponse request returning *ModelConfigurationRetrieveResponse
func (c *ClientWithResponses) ModelConfigurationRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ModelConfigurationRetrieveResponse, error) {
	rsp, err := c.ModelConfigurationRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelConfigurationRetrieveResponse(rsp)
}

// ModelConfigurationPartialUpdateWithBodyWithResponse request with arbitrary body returning *ModelConfigurationPartialUpdateResponse
func (c *ClientWithResponses) ModelConfigurationPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModelConfigurationPartialUpdateResponse, error) {
	rsp, err := c.ModelConfigurationPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelConfigurationPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ModelConfigurationPartialUpdateWithResponse(ctx context.Context, id int, body ModelConfigurationPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ModelConfigurationPartialUpdateResponse, error) {
	rsp, err := c.ModelConfigurationPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelConfigurationPartialUpdateResponse(rsp)
}

// ModelConfigurationUpdateWithBodyWithResponse request with arbitrary body returning *ModelConfigurationUpdateResponse
func (c *ClientWithResponses) ModelConfigurationUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModelConfigurationUpdateResponse, error) {
	rsp, err := c.ModelConfigurationUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelConfigurationUpdateResponse(rsp)
}

func (c *ClientWithResponses) ModelConfigurationUpdateWithResponse(ctx context.Context, id int, body ModelConfigurationUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ModelConfigurationUpdateResponse, error) {
	rsp, err := c.ModelConfigurationUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelConfigurationUpdateResponse(rsp)
}

// ParameterTuningJobListWithResponse request returning *ParameterTuningJobListResponse
func (c *ClientWithResponses) ParameterTuningJobListWithResponse(ctx context.Context, params *ParameterTuningJobListParams, reqEditors ...RequestEditorFn) (*ParameterTuningJobListResponse, error) {
	rsp, err := c.ParameterTuningJobList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParameterTuningJobListResponse(rsp)
}

// ParameterTuningJobCreateWithBodyWithResponse request with arbitrary body returning *ParameterTuningJobCreateResponse
func (c *ClientWithResponses) ParameterTuningJobCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ParameterTuningJobCreateResponse, error) {
	rsp, err := c.ParameterTuningJobCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParameterTuningJobCreateResponse(rsp)
}

func (c *ClientWithResponses) ParameterTuningJobCreateWithResponse(ctx context.Context, body ParameterTuningJobCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ParameterTuningJobCreateResponse, error) {
	rsp, err := c.ParameterTuningJobCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParameterTuningJobCreateResponse(rsp)
}

// ParameterTuningJobDestroyWithResponse request returning *ParameterTuningJobDestroyResponse
func (c *ClientWithResponses) ParameterTuningJobDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ParameterTuningJobDestroyResponse, error) {
	rsp, err := c.ParameterTuningJobDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParameterTuningJobDestroyResponse(rsp)
}

// ParameterTuningJobRetrieveWithResponse request returning *ParameterTuningJobRetrieveResponse
func (c *ClientWithResponses) ParameterTuningJobRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ParameterTuningJobRetrieveResponse, error) {
	rsp, err := c.ParameterTuningJobRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParameterTuningJobRetrieveResponse(rsp)
}

// ParameterTuningJobPartialUpdateWithBodyWithResponse request with arbitrary body returning *ParameterTuningJobPartialUpdateResponse
func (c *ClientWithResponses) ParameterTuningJobPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ParameterTuningJobPartialUpdateResponse, error) {
	rsp, err := c.ParameterTuningJobPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParameterTuningJobPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ParameterTuningJobPartialUpdateWithResponse(ctx context.Context, id int, body ParameterTuningJobPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ParameterTuningJobPartialUpdateResponse, error) {
	rsp, err := c.ParameterTuningJobPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParameterTuningJobPartialUpdateResponse(rsp)
}

// ParameterTuningJobUpdateWithBodyWithResponse request with arbitrary body returning *ParameterTuningJobUpdateResponse
func (c *ClientWithResponses) ParameterTuningJobUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ParameterTuningJobUpdateResponse, error) {
	rsp, err := c.ParameterTuningJobUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParameterTuningJobUpdateResponse(rsp)
}

func (c *ClientWithResponses) ParameterTuningJobUpdateWithResponse(ctx context.Context, id int, body ParameterTuningJobUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ParameterTuningJobUpdateResponse, error) {
	rsp, err := c.ParameterTuningJobUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParameterTuningJobUpdateResponse(rsp)
}

// ProjectListWithResponse request returning *ProjectListResponse
func (c *ClientWithResponses) ProjectListWithResponse(ctx context.Context, params *ProjectListParams, reqEditors ...RequestEditorFn) (*ProjectListResponse, error) {
	rsp, err := c.ProjectList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectListResponse(rsp)
}

// ProjectCreateWithBodyWithResponse request with arbitrary body returning *ProjectCreateResponse
func (c *ClientWithResponses) ProjectCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectCreateResponse, error) {
	rsp, err := c.ProjectCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectCreateResponse(rsp)
}

func (c *ClientWithResponses) ProjectCreateWithResponse(ctx context.Context, body ProjectCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectCreateResponse, error) {
	rsp, err := c.ProjectCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectCreateResponse(rsp)
}

// ProjectDestroyWithResponse request returning *ProjectDestroyResponse
func (c *ClientWithResponses) ProjectDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProjectDestroyResponse, error) {
	rsp, err := c.ProjectDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectDestroyResponse(rsp)
}

// ProjectRetrieveWithResponse request returning *ProjectRetrieveResponse
func (c *ClientWithResponses) ProjectRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProjectRetrieveResponse, error) {
	rsp, err := c.ProjectRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectRetrieveResponse(rsp)
}

// ProjectPartialUpdateWithBodyWithResponse request with arbitrary body returning *ProjectPartialUpdateResponse
func (c *ClientWithResponses) ProjectPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectPartialUpdateResponse, error) {
	rsp, err := c.ProjectPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProjectPartialUpdateWithResponse(ctx context.Context, id int, body ProjectPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectPartialUpdateResponse, error) {
	rsp, err := c.ProjectPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectPartialUpdateResponse(rsp)
}

// ProjectUpdateWithBodyWithResponse request with arbitrary body returning *ProjectUpdateResponse
func (c *ClientWithResponses) ProjectUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProjectUpdateResponse, error) {
	rsp, err := c.ProjectUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProjectUpdateWithResponse(ctx context.Context, id int, body ProjectUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProjectUpdateResponse, error) {
	rsp, err := c.ProjectUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectUpdateResponse(rsp)
}

// ProjectSummaryRetrieveWithResponse request returning *ProjectSummaryRetrieveResponse
func (c *ClientWithResponses) ProjectSummaryRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProjectSummaryRetrieveResponse, error) {
	rsp, err := c.ProjectSummaryRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectSummaryRetrieveResponse(rsp)
}

// SchemaRetrieveWithResponse request returning *SchemaRetrieveResponse
func (c *ClientWithResponses) SchemaRetrieveWithResponse(ctx context.Context, params *SchemaRetrieveParams, reqEditors ...RequestEditorFn) (*SchemaRetrieveResponse, error) {
	rsp, err := c.SchemaRetrieve(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSchemaRetrieveResponse(rsp)
}

// SplitConfigListWithResponse request returning *SplitConfigListResponse
func (c *ClientWithResponses) SplitConfigListWithResponse(ctx context.Context, params *SplitConfigListParams, reqEditors ...RequestEditorFn) (*SplitConfigListResponse, error) {
	rsp, err := c.SplitConfigList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSplitConfigListResponse(rsp)
}

// SplitConfigCreateWithBodyWithResponse request with arbitrary body returning *SplitConfigCreateResponse
func (c *ClientWithResponses) SplitConfigCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SplitConfigCreateResponse, error) {
	rsp, err := c.SplitConfigCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSplitConfigCreateResponse(rsp)
}

func (c *ClientWithResponses) SplitConfigCreateWithResponse(ctx context.Context, body SplitConfigCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SplitConfigCreateResponse, error) {
	rsp, err := c.SplitConfigCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSplitConfigCreateResponse(rsp)
}

// SplitConfigDestroyWithResponse request returning *SplitConfigDestroyResponse
func (c *ClientWithResponses) SplitConfigDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SplitConfigDestroyResponse, error) {
	rsp, err := c.SplitConfigDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSplitConfigDestroyResponse(rsp)
}

// SplitConfigRetrieveWithResponse request returning *SplitConfigRetrieveResponse
func (c *ClientWithResponses) SplitConfigRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SplitConfigRetrieveResponse, error) {
	rsp, err := c.SplitConfigRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSplitConfigRetrieveResponse(rsp)
}

// SplitConfigPartialUpdateWithBodyWithResponse request with arbitrary body returning *SplitConfigPartialUpdateResponse
func (c *ClientWithResponses) SplitConfigPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SplitConfigPartialUpdateResponse, error) {
	rsp, err := c.SplitConfigPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSplitConfigPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SplitConfigPartialUpdateWithResponse(ctx context.Context, id int, body SplitConfigPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SplitConfigPartialUpdateResponse, error) {
	rsp, err := c.SplitConfigPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSplitConfigPartialUpdateResponse(rsp)
}

// SplitConfigUpdateWithBodyWithResponse request with arbitrary body returning *SplitConfigUpdateResponse
func (c *ClientWithResponses) SplitConfigUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SplitConfigUpdateResponse, error) {
	rsp, err := c.SplitConfigUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSplitConfigUpdateResponse(rsp)
}

func (c *ClientWithResponses) SplitConfigUpdateWithResponse(ctx context.Context, id int, body SplitConfigUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SplitConfigUpdateResponse, error) {
	rsp, err := c.SplitConfigUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSplitConfigUpdateResponse(rsp)
}

// TaskLogListWithResponse request returning *TaskLogListResponse
func (c *ClientWithResponses) TaskLogListWithResponse(ctx context.Context, params *TaskLogListParams, reqEditors ...RequestEditorFn) (*TaskLogListResponse, error) {
	rsp, err := c.TaskLogList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTaskLogListResponse(rsp)
}

// TaskLogRetrieveWithResponse request returning *TaskLogRetrieveResponse
func (c *ClientWithResponses) TaskLogRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TaskLogRetrieveResponse, error) {
	rsp, err := c.TaskLogRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTaskLogRetrieveResponse(rsp)
}

// TokenCreateWithBodyWithResponse request with arbitrary body returning *TokenCreateResponse
func (c *ClientWithResponses) TokenCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenCreateResponse, error) {
	rsp, err := c.TokenCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenCreateResponse(rsp)
}

func (c *ClientWithResponses) TokenCreateWithResponse(ctx context.Context, body TokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenCreateResponse, error) {
	rsp, err := c.TokenCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenCreateResponse(rsp)
}

// TrainedModelListWithResponse request returning *TrainedModelListResponse
func (c *ClientWithResponses) TrainedModelListWithResponse(ctx context.Context, params *TrainedModelListParams, reqEditors ...RequestEditorFn) (*TrainedModelListResponse, error) {
	rsp, err := c.TrainedModelList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainedModelListResponse(rsp)
}

// TrainedModelCreateWithBodyWithResponse request with arbitrary body returning *TrainedModelCreateResponse
func (c *ClientWithResponses) TrainedModelCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainedModelCreateResponse, error) {
	rsp, err := c.TrainedModelCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainedModelCreateResponse(rsp)
}

func (c *ClientWithResponses) TrainedModelCreateWithResponse(ctx context.Context, body TrainedModelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TrainedModelCreateResponse, error) {
	rsp, err := c.TrainedModelCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainedModelCreateResponse(rsp)
}

// TrainedModelDestroyWithResponse request returning *TrainedModelDestroyResponse
func (c *ClientWithResponses) TrainedModelDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainedModelDestroyResponse, error) {
	rsp, err := c.TrainedModelDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainedModelDestroyResponse(rsp)
}

// TrainedModelRetrieveWithResponse request returning *TrainedModelRetrieveResponse
func (c *ClientWithResponses) TrainedModelRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainedModelRetrieveResponse, error) {
	rsp, err := c.TrainedModelRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainedModelRetrieveResponse(rsp)
}

// TrainedModelPartialUpdateWithBodyWithResponse request with arbitrary body returning *TrainedModelPartialUpdateResponse
func (c *ClientWithResponses) TrainedModelPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainedModelPartialUpdateResponse, error) {
	rsp, err := c.TrainedModelPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainedModelPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TrainedModelPartialUpdateWithResponse(ctx context.Context, id int, body TrainedModelPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TrainedModelPartialUpdateResponse, error) {
	rsp, err := c.TrainedModelPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainedModelPartialUpdateResponse(rsp)
}

// TrainedModelUpdateWithBodyWithResponse request with arbitrary body returning *TrainedModelUpdateResponse
func (c *ClientWithResponses) TrainedModelUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainedModelUpdateResponse, error) {
	rsp, err := c.TrainedModelUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainedModelUpdateResponse(rsp)
}

func (c *ClientWithResponses) TrainedModelUpdateWithResponse(ctx context.Context, id int, body TrainedModelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TrainedModelUpdateResponse, error) {
	rsp, err := c.TrainedModelUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainedModelUpdateResponse(rsp)
}

// TrainedModelDownloadFileRetrieveWithResponse request returning *TrainedModelDownloadFileRetrieveResponse
func (c *ClientWithResponses) TrainedModelDownloadFileRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainedModelDownloadFileRetrieveResponse, error) {
	rsp, err := c.TrainedModelDownloadFileRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainedModelDownloadFileRetrieveResponse(rsp)
}

// TrainedModelSampleRecommendationMetadataRetrieveWithResponse request returning *TrainedModelSampleRecommendationMetadataRetrieveResponse
func (c *ClientWithResponses) TrainedModelSampleRecommendationMetadataRetrieveWithResponse(ctx context.Context, id int, metadataId string, reqEditors ...RequestEditorFn) (*TrainedModelSampleRecommendationMetadataRetrieveResponse, error) {
	rsp, err := c.TrainedModelSampleRecommendationMetadataRetrieve(ctx, id, metadataId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainedModelSampleRecommendationMetadataRetrieveResponse(rsp)
}

// TrainedModelSampleRecommendationRawRetrieveWithResponse request returning *TrainedModelSampleRecommendationRawRetrieveResponse
func (c *ClientWithResponses) TrainedModelSampleRecommendationRawRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainedModelSampleRecommendationRawRetrieveResponse, error) {
	rsp, err := c.TrainedModelSampleRecommendationRawRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainedModelSampleRecommendationRawRetrieveResponse(rsp)
}

// TrainedModelUnlinkFileDestroyWithResponse request returning *TrainedModelUnlinkFileDestroyResponse
func (c *ClientWithResponses) TrainedModelUnlinkFileDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainedModelUnlinkFileDestroyResponse, error) {
	rsp, err := c.TrainedModelUnlinkFileDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainedModelUnlinkFileDestroyResponse(rsp)
}

// TrainingDataListWithResponse request returning *TrainingDataListResponse
func (c *ClientWithResponses) TrainingDataListWithResponse(ctx context.Context, params *TrainingDataListParams, reqEditors ...RequestEditorFn) (*TrainingDataListResponse, error) {
	rsp, err := c.TrainingDataList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainingDataListResponse(rsp)
}

// TrainingDataCreateWithBodyWithResponse request with arbitrary body returning *TrainingDataCreateResponse
func (c *ClientWithResponses) TrainingDataCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainingDataCreateResponse, error) {
	rsp, err := c.TrainingDataCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainingDataCreateResponse(rsp)
}

// TrainingDataDestroyWithResponse request returning *TrainingDataDestroyResponse
func (c *ClientWithResponses) TrainingDataDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainingDataDestroyResponse, error) {
	rsp, err := c.TrainingDataDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainingDataDestroyResponse(rsp)
}

// TrainingDataRetrieveWithResponse request returning *TrainingDataRetrieveResponse
func (c *ClientWithResponses) TrainingDataRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainingDataRetrieveResponse, error) {
	rsp, err := c.TrainingDataRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainingDataRetrieveResponse(rsp)
}

// TrainingDataPartialUpdateWithBodyWithResponse request with arbitrary body returning *TrainingDataPartialUpdateResponse
func (c *ClientWithResponses) TrainingDataPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainingDataPartialUpdateResponse, error) {
	rsp, err := c.TrainingDataPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainingDataPartialUpdateResponse(rsp)
}

// TrainingDataUpdateWithBodyWithResponse request with arbitrary body returning *TrainingDataUpdateResponse
func (c *ClientWithResponses) TrainingDataUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TrainingDataUpdateResponse, error) {
	rsp, err := c.TrainingDataUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainingDataUpdateResponse(rsp)
}

// TrainingDataDownloadFileRetrieveWithResponse request returning *TrainingDataDownloadFileRetrieveResponse
func (c *ClientWithResponses) TrainingDataDownloadFileRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainingDataDownloadFileRetrieveResponse, error) {
	rsp, err := c.TrainingDataDownloadFileRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainingDataDownloadFileRetrieveResponse(rsp)
}

// TrainingDataUnlinkFileDestroyWithResponse request returning *TrainingDataUnlinkFileDestroyResponse
func (c *ClientWithResponses) TrainingDataUnlinkFileDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TrainingDataUnlinkFileDestroyResponse, error) {
	rsp, err := c.TrainingDataUnlinkFileDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTrainingDataUnlinkFileDestroyResponse(rsp)
}

// ParseAuthLoginCreateResponse parses an HTTP response from a AuthLoginCreateWithResponse call
func ParseAuthLoginCreateResponse(rsp *http.Response) (*AuthLoginCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthLoginCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JWT
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthLogoutCreateResponse parses an HTTP response from a AuthLogoutCreateWithResponse call
func ParseAuthLogoutCreateResponse(rsp *http.Response) (*AuthLogoutCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthLogoutCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RestAuthDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthPasswordChangeCreateResponse parses an HTTP response from a AuthPasswordChangeCreateWithResponse call
func ParseAuthPasswordChangeCreateResponse(rsp *http.Response) (*AuthPasswordChangeCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordChangeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RestAuthDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthPasswordResetCreateResponse parses an HTTP response from a AuthPasswordResetCreateWithResponse call
func ParseAuthPasswordResetCreateResponse(rsp *http.Response) (*AuthPasswordResetCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordResetCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RestAuthDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthPasswordResetConfirmCreateResponse parses an HTTP response from a AuthPasswordResetConfirmCreateWithResponse call
func ParseAuthPasswordResetConfirmCreateResponse(rsp *http.Response) (*AuthPasswordResetConfirmCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthPasswordResetConfirmCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RestAuthDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenRefreshCreateResponse parses an HTTP response from a AuthTokenRefreshCreateWithResponse call
func ParseAuthTokenRefreshCreateResponse(rsp *http.Response) (*AuthTokenRefreshCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenRefreshCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenRefresh
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenVerifyCreateResponse parses an HTTP response from a AuthTokenVerifyCreateWithResponse call
func ParseAuthTokenVerifyCreateResponse(rsp *http.Response) (*AuthTokenVerifyCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenVerifyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenVerify
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthUserRetrieveResponse parses an HTTP response from a AuthUserRetrieveWithResponse call
func ParseAuthUserRetrieveResponse(rsp *http.Response) (*AuthUserRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthUserRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthUserPartialUpdateResponse parses an HTTP response from a AuthUserPartialUpdateWithResponse call
func ParseAuthUserPartialUpdateResponse(rsp *http.Response) (*AuthUserPartialUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthUserPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthUserUpdateResponse parses an HTTP response from a AuthUserUpdateWithResponse call
func ParseAuthUserUpdateResponse(rsp *http.Response) (*AuthUserUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthUserUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEvaluationConfigListResponse parses an HTTP response from a EvaluationConfigListWithResponse call
func ParseEvaluationConfigListResponse(rsp *http.Response) (*EvaluationConfigListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EvaluationConfigListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EvaluationConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEvaluationConfigCreateResponse parses an HTTP response from a EvaluationConfigCreateWithResponse call
func ParseEvaluationConfigCreateResponse(rsp *http.Response) (*EvaluationConfigCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EvaluationConfigCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EvaluationConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEvaluationConfigDestroyResponse parses an HTTP response from a EvaluationConfigDestroyWithResponse call
func ParseEvaluationConfigDestroyResponse(rsp *http.Response) (*EvaluationConfigDestroyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EvaluationConfigDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseEvaluationConfigRetrieveResponse parses an HTTP response from a EvaluationConfigRetrieveWithResponse call
func ParseEvaluationConfigRetrieveResponse(rsp *http.Response) (*EvaluationConfigRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EvaluationConfigRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EvaluationConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEvaluationConfigPartialUpdateResponse parses an HTTP response from a EvaluationConfigPartialUpdateWithResponse call
func ParseEvaluationConfigPartialUpdateResponse(rsp *http.Response) (*EvaluationConfigPartialUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EvaluationConfigPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EvaluationConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEvaluationConfigUpdateResponse parses an HTTP response from a EvaluationConfigUpdateWithResponse call
func ParseEvaluationConfigUpdateResponse(rsp *http.Response) (*EvaluationConfigUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EvaluationConfigUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EvaluationConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseItemMetaDataListResponse parses an HTTP response from a ItemMetaDataListWithResponse call
func ParseItemMetaDataListResponse(rsp *http.Response) (*ItemMetaDataListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ItemMetaDataListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedItemMetaDataList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseItemMetaDataCreateResponse parses an HTTP response from a ItemMetaDataCreateWithResponse call
func ParseItemMetaDataCreateResponse(rsp *http.Response) (*ItemMetaDataCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ItemMetaDataCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ItemMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseItemMetaDataDestroyResponse parses an HTTP response from a ItemMetaDataDestroyWithResponse call
func ParseItemMetaDataDestroyResponse(rsp *http.Response) (*ItemMetaDataDestroyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ItemMetaDataDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseItemMetaDataRetrieveResponse parses an HTTP response from a ItemMetaDataRetrieveWithResponse call
func ParseItemMetaDataRetrieveResponse(rsp *http.Response) (*ItemMetaDataRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ItemMetaDataRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ItemMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseItemMetaDataPartialUpdateResponse parses an HTTP response from a ItemMetaDataPartialUpdateWithResponse call
func ParseItemMetaDataPartialUpdateResponse(rsp *http.Response) (*ItemMetaDataPartialUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ItemMetaDataPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ItemMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseItemMetaDataUpdateResponse parses an HTTP response from a ItemMetaDataUpdateWithResponse call
func ParseItemMetaDataUpdateResponse(rsp *http.Response) (*ItemMetaDataUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ItemMetaDataUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ItemMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseItemMetaDataDownloadFileRetrieveResponse parses an HTTP response from a ItemMetaDataDownloadFileRetrieveWithResponse call
func ParseItemMetaDataDownloadFileRetrieveResponse(rsp *http.Response) (*ItemMetaDataDownloadFileRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ItemMetaDataDownloadFileRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ItemMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseItemMetaDataUnlinkFileDestroyResponse parses an HTTP response from a ItemMetaDataUnlinkFileDestroyWithResponse call
func ParseItemMetaDataUnlinkFileDestroyResponse(rsp *http.Response) (*ItemMetaDataUnlinkFileDestroyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ItemMetaDataUnlinkFileDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseModelConfigurationListResponse parses an HTTP response from a ModelConfigurationListWithResponse call
func ParseModelConfigurationListResponse(rsp *http.Response) (*ModelConfigurationListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ModelConfigurationListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedModelConfigurationList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseModelConfigurationCreateResponse parses an HTTP response from a ModelConfigurationCreateWithResponse call
func ParseModelConfigurationCreateResponse(rsp *http.Response) (*ModelConfigurationCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ModelConfigurationCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ModelConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseModelConfigurationDestroyResponse parses an HTTP response from a ModelConfigurationDestroyWithResponse call
func ParseModelConfigurationDestroyResponse(rsp *http.Response) (*ModelConfigurationDestroyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ModelConfigurationDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseModelConfigurationRetrieveResponse parses an HTTP response from a ModelConfigurationRetrieveWithResponse call
func ParseModelConfigurationRetrieveResponse(rsp *http.Response) (*ModelConfigurationRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ModelConfigurationRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseModelConfigurationPartialUpdateResponse parses an HTTP response from a ModelConfigurationPartialUpdateWithResponse call
func ParseModelConfigurationPartialUpdateResponse(rsp *http.Response) (*ModelConfigurationPartialUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ModelConfigurationPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseModelConfigurationUpdateResponse parses an HTTP response from a ModelConfigurationUpdateWithResponse call
func ParseModelConfigurationUpdateResponse(rsp *http.Response) (*ModelConfigurationUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ModelConfigurationUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseParameterTuningJobListResponse parses an HTTP response from a ParameterTuningJobListWithResponse call
func ParseParameterTuningJobListResponse(rsp *http.Response) (*ParameterTuningJobListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ParameterTuningJobListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedParameterTuningJobList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseParameterTuningJobCreateResponse parses an HTTP response from a ParameterTuningJobCreateWithResponse call
func ParseParameterTuningJobCreateResponse(rsp *http.Response) (*ParameterTuningJobCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ParameterTuningJobCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ParameterTuningJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseParameterTuningJobDestroyResponse parses an HTTP response from a ParameterTuningJobDestroyWithResponse call
func ParseParameterTuningJobDestroyResponse(rsp *http.Response) (*ParameterTuningJobDestroyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ParameterTuningJobDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseParameterTuningJobRetrieveResponse parses an HTTP response from a ParameterTuningJobRetrieveWithResponse call
func ParseParameterTuningJobRetrieveResponse(rsp *http.Response) (*ParameterTuningJobRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ParameterTuningJobRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ParameterTuningJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseParameterTuningJobPartialUpdateResponse parses an HTTP response from a ParameterTuningJobPartialUpdateWithResponse call
func ParseParameterTuningJobPartialUpdateResponse(rsp *http.Response) (*ParameterTuningJobPartialUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ParameterTuningJobPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ParameterTuningJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseParameterTuningJobUpdateResponse parses an HTTP response from a ParameterTuningJobUpdateWithResponse call
func ParseParameterTuningJobUpdateResponse(rsp *http.Response) (*ParameterTuningJobUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ParameterTuningJobUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ParameterTuningJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProjectListResponse parses an HTTP response from a ProjectListWithResponse call
func ParseProjectListResponse(rsp *http.Response) (*ProjectListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ProjectListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProjectCreateResponse parses an HTTP response from a ProjectCreateWithResponse call
func ParseProjectCreateResponse(rsp *http.Response) (*ProjectCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ProjectCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProjectDestroyResponse parses an HTTP response from a ProjectDestroyWithResponse call
func ParseProjectDestroyResponse(rsp *http.Response) (*ProjectDestroyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ProjectDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseProjectRetrieveResponse parses an HTTP response from a ProjectRetrieveWithResponse call
func ParseProjectRetrieveResponse(rsp *http.Response) (*ProjectRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ProjectRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProjectPartialUpdateResponse parses an HTTP response from a ProjectPartialUpdateWithResponse call
func ParseProjectPartialUpdateResponse(rsp *http.Response) (*ProjectPartialUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ProjectPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProjectUpdateResponse parses an HTTP response from a ProjectUpdateWithResponse call
func ParseProjectUpdateResponse(rsp *http.Response) (*ProjectUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ProjectUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProjectSummaryRetrieveResponse parses an HTTP response from a ProjectSummaryRetrieveWithResponse call
func ParseProjectSummaryRetrieveResponse(rsp *http.Response) (*ProjectSummaryRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ProjectSummaryRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseSchemaRetrieveResponse parses an HTTP response from a SchemaRetrieveWithResponse call
func ParseSchemaRetrieveResponse(rsp *http.Response) (*SchemaRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SchemaRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/vnd.oai.openapi+json) unsupported

	}

	return response, nil
}

// ParseSplitConfigListResponse parses an HTTP response from a SplitConfigListWithResponse call
func ParseSplitConfigListResponse(rsp *http.Response) (*SplitConfigListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SplitConfigListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SplitConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSplitConfigCreateResponse parses an HTTP response from a SplitConfigCreateWithResponse call
func ParseSplitConfigCreateResponse(rsp *http.Response) (*SplitConfigCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SplitConfigCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SplitConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSplitConfigDestroyResponse parses an HTTP response from a SplitConfigDestroyWithResponse call
func ParseSplitConfigDestroyResponse(rsp *http.Response) (*SplitConfigDestroyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SplitConfigDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseSplitConfigRetrieveResponse parses an HTTP response from a SplitConfigRetrieveWithResponse call
func ParseSplitConfigRetrieveResponse(rsp *http.Response) (*SplitConfigRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SplitConfigRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SplitConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSplitConfigPartialUpdateResponse parses an HTTP response from a SplitConfigPartialUpdateWithResponse call
func ParseSplitConfigPartialUpdateResponse(rsp *http.Response) (*SplitConfigPartialUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SplitConfigPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SplitConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSplitConfigUpdateResponse parses an HTTP response from a SplitConfigUpdateWithResponse call
func ParseSplitConfigUpdateResponse(rsp *http.Response) (*SplitConfigUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SplitConfigUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SplitConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTaskLogListResponse parses an HTTP response from a TaskLogListWithResponse call
func ParseTaskLogListResponse(rsp *http.Response) (*TaskLogListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TaskLogListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TaskLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTaskLogRetrieveResponse parses an HTTP response from a TaskLogRetrieveWithResponse call
func ParseTaskLogRetrieveResponse(rsp *http.Response) (*TaskLogRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TaskLogRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTokenCreateResponse parses an HTTP response from a TokenCreateWithResponse call
func ParseTokenCreateResponse(rsp *http.Response) (*TokenCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TokenCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrainedModelListResponse parses an HTTP response from a TrainedModelListWithResponse call
func ParseTrainedModelListResponse(rsp *http.Response) (*TrainedModelListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainedModelListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTrainedModelList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrainedModelCreateResponse parses an HTTP response from a TrainedModelCreateWithResponse call
func ParseTrainedModelCreateResponse(rsp *http.Response) (*TrainedModelCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainedModelCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TrainedModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTrainedModelDestroyResponse parses an HTTP response from a TrainedModelDestroyWithResponse call
func ParseTrainedModelDestroyResponse(rsp *http.Response) (*TrainedModelDestroyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainedModelDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseTrainedModelRetrieveResponse parses an HTTP response from a TrainedModelRetrieveWithResponse call
func ParseTrainedModelRetrieveResponse(rsp *http.Response) (*TrainedModelRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainedModelRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrainedModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrainedModelPartialUpdateResponse parses an HTTP response from a TrainedModelPartialUpdateWithResponse call
func ParseTrainedModelPartialUpdateResponse(rsp *http.Response) (*TrainedModelPartialUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainedModelPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrainedModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrainedModelUpdateResponse parses an HTTP response from a TrainedModelUpdateWithResponse call
func ParseTrainedModelUpdateResponse(rsp *http.Response) (*TrainedModelUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainedModelUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrainedModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrainedModelDownloadFileRetrieveResponse parses an HTTP response from a TrainedModelDownloadFileRetrieveWithResponse call
func ParseTrainedModelDownloadFileRetrieveResponse(rsp *http.Response) (*TrainedModelDownloadFileRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainedModelDownloadFileRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrainedModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrainedModelSampleRecommendationMetadataRetrieveResponse parses an HTTP response from a TrainedModelSampleRecommendationMetadataRetrieveWithResponse call
func ParseTrainedModelSampleRecommendationMetadataRetrieveResponse(rsp *http.Response) (*TrainedModelSampleRecommendationMetadataRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainedModelSampleRecommendationMetadataRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecommendationWithMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrainedModelSampleRecommendationRawRetrieveResponse parses an HTTP response from a TrainedModelSampleRecommendationRawRetrieveWithResponse call
func ParseTrainedModelSampleRecommendationRawRetrieveResponse(rsp *http.Response) (*TrainedModelSampleRecommendationRawRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainedModelSampleRecommendationRawRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RawRecommendation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrainedModelUnlinkFileDestroyResponse parses an HTTP response from a TrainedModelUnlinkFileDestroyWithResponse call
func ParseTrainedModelUnlinkFileDestroyResponse(rsp *http.Response) (*TrainedModelUnlinkFileDestroyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainedModelUnlinkFileDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseTrainingDataListResponse parses an HTTP response from a TrainingDataListWithResponse call
func ParseTrainingDataListResponse(rsp *http.Response) (*TrainingDataListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainingDataListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTrainingDataList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrainingDataCreateResponse parses an HTTP response from a TrainingDataCreateWithResponse call
func ParseTrainingDataCreateResponse(rsp *http.Response) (*TrainingDataCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainingDataCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TrainingData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTrainingDataDestroyResponse parses an HTTP response from a TrainingDataDestroyWithResponse call
func ParseTrainingDataDestroyResponse(rsp *http.Response) (*TrainingDataDestroyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainingDataDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseTrainingDataRetrieveResponse parses an HTTP response from a TrainingDataRetrieveWithResponse call
func ParseTrainingDataRetrieveResponse(rsp *http.Response) (*TrainingDataRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainingDataRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrainingData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrainingDataPartialUpdateResponse parses an HTTP response from a TrainingDataPartialUpdateWithResponse call
func ParseTrainingDataPartialUpdateResponse(rsp *http.Response) (*TrainingDataPartialUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainingDataPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrainingData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrainingDataUpdateResponse parses an HTTP response from a TrainingDataUpdateWithResponse call
func ParseTrainingDataUpdateResponse(rsp *http.Response) (*TrainingDataUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainingDataUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrainingData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrainingDataDownloadFileRetrieveResponse parses an HTTP response from a TrainingDataDownloadFileRetrieveWithResponse call
func ParseTrainingDataDownloadFileRetrieveResponse(rsp *http.Response) (*TrainingDataDownloadFileRetrieveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainingDataDownloadFileRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrainingData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTrainingDataUnlinkFileDestroyResponse parses an HTTP response from a TrainingDataUnlinkFileDestroyWithResponse call
func ParseTrainingDataUnlinkFileDestroyResponse(rsp *http.Response) (*TrainingDataUnlinkFileDestroyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TrainingDataUnlinkFileDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

